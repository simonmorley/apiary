FORMAT: 1A
HOST: https://api.polkaspots.com

# PolkaSpots API Documentation for Cucumber Tony (Alpha).

##I'm doing it with Cucumber Tony's API, are you?##

Cucumber Tony's API provides a way to control your Wireless hotspots programatically. This documentation is not considered production ready.

Our API is based on REST principles, all you need to use it is your Cucumber Tony account. You must be authenticated and call HTTPs requests on the URLs listed below. 

Please create an application in Cucumber Tony and use your access token in all requests. More documentation will follow.

>**Note:** Some resources trigger updates to your boxes. Sending invalid data can cause your boxes to crash.

## Generally Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

##Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 instead).
- 201 `Created` - The request was successful and a resource was created.
- 204 `No Content` - The request was successful but there is no representation to return (that is, the response is empty).
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 403 `Forbidden` - Access denied. Naughty pants.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 422 `Bad Request` - The request could not be understood or was missing required parameters.
- 429 `Too Many Requests` - Exceeded our API limits of 60 per minute. 
- 503 `Service Unavailable` - The service is temporary unavailable. Try again later.

##Oauth2 

To make use of the Cucumber Tony API, you will need an access token (and refresh token if building a more persistent application).

For more information how to generate this, please visit the support centre (TBC).

# Group Accounts

Accounts related resources of the **Accounts API**

## Accounts Collection [/api/v1/accounts]

## Generate Password [/accounts/generate_password]

Create a unique password for your captive portal. This doesn't save anything, it's just a nice little end-point to use.

### Generate a one time password [POST]

+ Request (application/json)

            Accept: application/json

+ Response 200 (application/json)

    + Body

            {"password": "random-passy"}

# Group Alerts

A resource within boxes. Enables / disables alerts for a specific box. Alerts are currently sent by email and can be overridden in your account / settings.

- `PATCH` - Updates a resource

## Update the alerts for a box [/api/v1/boxes/{box_id}/alerts{?alerts}]

### Enable / Disable alerts for a box [PATCH]

+ Parameters

    + box_id (required, string, `"JCyK7Zwh0ON_ZOWso8Mhuw`) ... Slug `slug` of the box to perform action with. Has example value.
    + alerts (required, boolean, `"true`) ... True or false depending on whether you want alerts on or off.

+ Request (application/json)
    
        { "box_id": "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 200 (application/json)

        {
            "is_monitored": true,
            "slug": "JCyK7Zwh0ON_ZOWso8Mhuw"
        }

+ Response 422 (application/json)

        { status: "unprocessable_entity" }


# Group Blacklists

Related resources of the **Blacklists API**. Blacklists belong to a location. You cannot currently list all your blacklists without specifying a location id (slug).

You can either create, read, update and destroy your blacklists via the blacklists API or you may update with a location.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Blacklists Collection [/api/v1/locations/{location_id}/blacklists]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Blacklists [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
    
            [{
                "id": 57,
                "mac": "11-22-33-44-55-66",
                "expires_at": null,
                "created_at": "September 17 2014 13:49:43"
            },
            {
                "id": 58,
                "mac": "22-33-22-11-33-44",
                "expires_at": "September 20 2014 00:00:00",
                "created_at": "September 17 2014 13:49:43"
            }]
    
## Blacklists Create [/api/v1/locations/{location_id}/blacklists{?blacklisted,mac}]

### Create a Blacklisted device [POST]

There's two ways to create a blacklisted device, either using this API or the location's API as a nested resource.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + blacklisted (required, params, `mac and optional expired_at`) ... Mac address of the device to block and an optional expires_at date.

+ Request (application/json)

        {
            "blacklisted": 
                {
                    "mac": "00:22:22:11:22:33",
                    "expires_at": "September 20 2015 00:00:00"
                }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "mac": "00:22:22:11:22:33",
            "expires_at": "2015-09-20T00:00:00.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

## Update a blacklist [/api/v1/locations/{location_id}/blacklists/{id}?blacklisted={params}]

### Update a blacklisted device [PATCH]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the blacklisted device you wish to update.
    + params (required, object, `1`) ... Mac and optional expiration date


+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 7,
            "blacklisted: {
                "mac": "00:22:22:11:22:33"
            }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "mac": "00:22:22:11:22:33",
            "expires_at": "2015-09-20T00:00:00.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

## Blacklisted Delete [/api/v1/locations/{location_id}/blacklisted/{id}]

### Delete a blacklisted device [DELETE]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the blacklisted device you wish to delete.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)

# Group Boxes

Boxes belong to locations and whilst you can read, update, destroy and perform other non-restful actions on a box (or boxes), you are not permitted to create a box without specifiying a location_id with the parameters.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Boxes Collection [/api/v1/boxes]

Lists all your boxes globally.

### List all Boxes [GET]

+ Response 200 (application/json)


    + Body

            [
                {
                    "nasname": "10.85.10.162",
                    "slug": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti AirRouter",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 2",
                    "state": "Online",
                    "can_reboot": true,
                    "rebooted": true
                },
                {
                    "nasname": "10.85.13.238",
                    "slug": "bzwZif_WftBTFkPDfjfJfA",
                    "calledstationid": "24-A4-3C-7C-FC-0A",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti UniFi",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 4",
                    "state": "Online",
                    "can_reboot": true
                },
                {
                    "nasname": "2.5.6.7",
                    "slug": "BFU1ZP9QeN0k3NSIIz8UQQ",
                    "calledstationid": "00-27-22-50-5C-E1",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": null,
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 5",
                    "state": "Online",
                    "can_reboot": false
                },
                {
                    "nasname": "10.85.18.146",
                    "slug": "fUMJ89X6s4MM1AajUHl-fQ",
                    "calledstationid": "24-A4-3C-02-37-67",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti UniFi AP Pro",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 5",
                    "state": "Online",
                    "can_reboot": true
                }
            ]

## Location Boxes Collection [/api/v1/locations/{location_id}/boxes]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Location Boxes [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body

            [
                {
                    "nasname": "10.85.10.162",
                    "slug": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti AirRouter",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 2",
                    "state": "Online",
                    "can_reboot": true,
                    "rebooted": true
                },
                {
                    "nasname": "10.85.13.238",
                    "slug": "bzwZif_WftBTFkPDfjfJfA",
                    "calledstationid": "24-A4-3C-7C-FC-0A",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti UniFi",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 4",
                    "state": "Online",
                    "can_reboot": true
                },
                {
                    "nasname": "2.5.6.7",
                    "slug": "BFU1ZP9QeN0k3NSIIz8UQQ",
                    "calledstationid": "00-27-22-50-5C-E1",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": null,
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 5",
                    "state": "Online",
                    "can_reboot": false
                },
                {
                    "nasname": "10.85.18.146",
                    "slug": "fUMJ89X6s4MM1AajUHl-fQ",
                    "calledstationid": "24-A4-3C-02-37-67",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti UniFi AP Pro",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 5",
                    "state": "Online",
                    "can_reboot": true
                }
            ]

## Box [/api/v1/boxes/{id}]

+ Parameters

    + id (required, string, `a-long-slug`) ... Slug `slug` of the box to perform action with. Has example value.

### Display a box [GET]

+ Request (application/json)

            { "id": "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 200 (application/json)


    + Body

                {
                    "slug": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "created_at": "March 29 2014 10:54:59",
                    "device_icon": "ubiquiti-airrouter-icon.png",
                    "uptime": "",
                    "location_id": 53,
                    "gmaps_zoom": 10,
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "description": "In the washing room",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "nasname": "10.85.10.162",
                    "wan_ip": "192.168.1.64",
                    "wan_proto": "static",
                    "public_ip": "86.29.244.37",
                    "state": "queued",
                    "installer_id": 1,
                    "radius_secret": "f797ef11f80f2737e07de1bae056",
                    "serial_number": "1601-9532-9289-6598",
                    "system_type": "Atheros AR7241",
                    "access_token": "3db9e053-fabb-422d-a5b1-18b275af5236",
                    "machine_type": "Ubiquiti AirRouter",
                    "gubbins_version": "1.3",
                    "latitude": "51.54462696721446",
                    "longitude": "-0.053558349609375",
                    "wan_ipaddr": "192.168.1.1",
                    "firmware_version": "p_140511_00",
                    "wan_netmask": "255.255.255.0",
                    "wan_gateway": "192.168.1.1",
                    "wan_dns_1": "8.8.8.8",
                    "wan_dns_2": "8.8.4.4",
                    "channel": "04",
                    "channel_5": "auto",
                    "tx_power_2": "19",
                    "tx_power_5": "20",
                    "ht_mode_2": "HT40+",
                    "ht_mode_5": "HT20",
                    "device_id": 115,
                    "updated_at": "September 29 2014 17:13:56",
                    "development_mode": "Beta",
                    "sync_id": "ad4a940a0bef034509dfc306a54f66c46bd9",
                    "is_monitored": false,
                    "dns_hostname": null,
                    "pppoe_username": "user@polkaspots.com",
                    "pppoe_password": "pass",
                    "radiusnasid": "6c06c176-61ce-4484-87ff-9f55b4",
                    "last_disconnect_reason": null,
                    "upgrade_throttle": null,
                    "next_firmware_name": "Stinky Panda\t (p_140522_00)",
                    "current_firmware_name": "Stinky Panda (p_140511_00)",
                    "device_is_online": false,
                    "fw_upgrade_scheduled": null,
                    "dual_band": false,
                    "iwinfo": null,
                    "avg_speedtest": 0,
                    "wan_mtu": 1500,
                    "is_upgrading": false,
                    "can_reboot": true,
                    "location_slug": "polkaspots-office",
                    "latest_speedtest": {
                        "result": 13,
                        "timestamp": 1412012423
                    }
                }

### Delete a box [DELETE]

+ Parameters

    + id (required, integer, `1`) ... ID of the box you wish to delete.

+ Request (application/json)

        {   "id": 'JCyK7Zwh0ON_ZOWso8Mhuw'  }

+ Response 204 (application/json)


## Box Create [/api/v1/boxes{?calledstationid,description,location_id}]

### Create a Box [POST]

Don't forget, you must send the location_id with your request IN the box params. The following params are required:

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + calledstationid (required, string, `mac`) ... Mac address of the box.
    + description (required, text, `Upstairs, in the loft`) ... A description of the box.

+ Request (application/json)

        { 
            "box":
                {
                    "location_id": 53,
                    "gmaps_zoom": 10,
                    "description": "In the washing room",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "wan_ip": "192.168.1.64",
                    "wan_proto": "static",
                    "radius_secret": "f797ef11f80f2737e07de1bae056",
                    "access_token": "3db9e053-fabb-422d-a5b1-18b275af5236",
                    "machine_type": "Ubiquiti AirRouter",
                    "gubbins_version": "1.3",
                    "latitude": "51.54462696721446",
                    "longitude": "-0.053558349609375",
                    "wan_netmask": "255.255.255.0",
                    "wan_gateway": "192.168.1.1",
                    "wan_dns_1": "8.8.8.8",
                    "wan_dns_2": "8.8.4.4",
                    "channel": "04",
                    "channel_5": "auto",
                    "tx_power_2": "19",
                    "tx_power_5": "20",
                    "ht_mode_2": "HT40+",
                    "ht_mode_5": "HT20",
                    "updated_at": "September 29 2014 17:13:56",
                    "development_mode": "Beta",
                    "is_monitored": false,
                    "pppoe_username": "user@polkaspots.com",
                    "pppoe_password": "pass"
                }
        }
        

+ Response 200 (application/json)

                {
                    "slug": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "created_at": "March 29 2014 10:54:59",
                    "device_icon": "ubiquiti-airrouter-icon.png",
                    "location_id": 53,
                    "gmaps_zoom": 10,
                    "description": "In the washing room",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "wan_ip": "192.168.1.64",
                    "wan_proto": "static",
                    "radius_secret": "f797ef11f80f2737e07de1bae056",
                    "access_token": "3db9e053-fabb-422d-a5b1-18b275af5236",
                    "machine_type": "Ubiquiti AirRouter",
                    "gubbins_version": "1.3",
                    "latitude": "51.54462696721446",
                    "longitude": "-0.053558349609375",
                    "wan_netmask": "255.255.255.0",
                    "wan_gateway": "192.168.1.1",
                    "wan_dns_1": "8.8.8.8",
                    "wan_dns_2": "8.8.4.4",
                    "channel": "04",
                    "channel_5": "auto",
                    "tx_power_2": "19",
                    "tx_power_5": "20",
                    "ht_mode_2": "HT40+",
                    "ht_mode_5": "HT20",
                    "updated_at": "September 29 2014 17:13:56",
                    "development_mode": "Beta",
                    "is_monitored": false,
                    "pppoe_username": "user@polkaspots.com",
                    "pppoe_password": "pass"
                }


## Update a box [/api/v1/boxes/{id}{?params}]

### Update a box [PATCH]

If you update any fields related to the network settings, you will reboot your boxes

+ Parameters

    + id (required, integer, `1`) ... ID of the blacklisted device you wish to update.
    + params (required, object, `1`) ... Any information about the box. A full list of params can be seen above.

+ Request (application/json)

        { 
            "box":
                {
                    "location_id": 53,
                    "gmaps_zoom": 10,
                    "description": "In the washing room",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "wan_ip": "192.168.1.64",
                    "wan_proto": "static",
                    "radius_secret": "f797ef11f80f2737e07de1bae056",
                    "access_token": "3db9e053-fabb-422d-a5b1-18b275af5236",
                    "machine_type": "Ubiquiti AirRouter",
                    "gubbins_version": "1.3",
                    "latitude": "51.54462696721446",
                    "longitude": "-0.053558349609375",
                    "wan_netmask": "255.255.255.0",
                    "wan_gateway": "192.168.1.1",
                    "wan_dns_1": "8.8.8.8",
                    "wan_dns_2": "8.8.4.4",
                    "channel": "04",
                    "channel_5": "auto",
                    "tx_power_2": "19",
                    "tx_power_5": "20",
                    "ht_mode_2": "HT40+",
                    "ht_mode_5": "HT20",
                    "updated_at": "September 29 2014 17:13:56",
                    "development_mode": "Beta",
                    "is_monitored": false,
                    "pppoe_username": "user@polkaspots.com",
                    "pppoe_password": "pass"
                }
        }


+ Response 200 (application/json)

                {
                    "slug": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "created_at": "March 29 2014 10:54:59",
                    "device_icon": "ubiquiti-airrouter-icon.png",
                    "location_id": 53,
                    "gmaps_zoom": 10,
                    "description": "In the washing room",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "wan_ip": "192.168.1.64",
                    "wan_proto": "static",
                    "radius_secret": "f797ef11f80f2737e07de1bae056",
                    "access_token": "3db9e053-fabb-422d-a5b1-18b275af5236",
                    "machine_type": "Ubiquiti AirRouter",
                    "gubbins_version": "1.3",
                    "latitude": "51.54462696721446",
                    "longitude": "-0.053558349609375",
                    "wan_netmask": "255.255.255.0",
                    "wan_gateway": "192.168.1.1",
                    "wan_dns_1": "8.8.8.8",
                    "wan_dns_2": "8.8.4.4",
                    "channel": "04",
                    "channel_5": "auto",
                    "tx_power_2": "19",
                    "tx_power_5": "20",
                    "ht_mode_2": "HT40+",
                    "ht_mode_5": "HT20",
                    "updated_at": "September 29 2014 17:13:56",
                    "development_mode": "Beta",
                    "is_monitored": false,
                    "pppoe_username": "user@polkaspots.com",
                    "pppoe_password": "pass"
                }

## Reboot a box [/api/v1/boxes/{id}/reboot]

### Reboot a box [POST]

+ Parameters

    + id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... ID (we use the slug) of the device you want to reboot.

+ Request (application/json)

        { "id": "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 200 (application/json)

        { response: "Please allow 2-3 minute for the device to reboot" }

+ Response 400 (application/json)

        { status: "unprocessable_entity" }

## Reset a box [/api/v1/boxes/{id}/reset{?soft}]

Restores things to factory defaults.

Sending the parameter 'soft', will perform a soft reset of the box. This doesn't reset any certificates etc, it just resets the basic attributes.

### Reset a box [POST]

+ Parameters

    + id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... ID (we use the slug) of the device you want to reboot.
    + soft (optional, string, `true`) ... Soft reset the box by sending the soft=true parameter.

+ Request (application/json)

        { "id": "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 200 (application/json)

        { response: "Please allow 2-3 minute for the device to reset" }

+ Response 400 (application/json)

        { status: "unprocessable_entity" }


## Transfer a box [/api/v1/boxes/{id}/transfer{?transfer_to}]

Creates a transfer to move a box to a different location. Please note, this cannot be reversed, if you enter the incorrect location_id to transfer to, you may lose the box forever :(

This does not happen immediately and will be queued for transfer. This might take a few seconds to complete.

Please note, this will also reset your box to reflect the settings of the new location.

### Transfer a box [POST]

+ Parameters

    + id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... ID (we use the slug) of the device you want to reboot.
    + transfer_to (required, string, `759275635389093876`) ... The Unique ID of the location you want to transfer the device to.

+ Request (application/json)

        { 
            "id": "JCyK7Zwh0ON_ZOWso8Mhuw",
            "transfer_to": "759275635389093876",
        }

+ Response 200 (application/json)

        { slug: "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 400 (application/json)

        { status: "unprocessable_entity" }

# Group Commands

Commands reference the **Commands API**. 

Commands can be applied directly to a box (see Payloads API) or events. There's two types of events:

1. Available to schedule
2. PolkaSpots only

PolkaSpots only commands should not be run on non-ps boxes. For example, you cannot schedule a Xirrus to reboot using the paylods.

However, you may disable the Xirrus login screens. PolkaSpots only commands are suitable for boxes running the Stinky Panda firmware only.

Only PolkaSpots staff are able to create, modify and delete commands at the moment.

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources

##Allowed HTTPs requests for non-customers:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `DELETE` - Delete a resource

## Commands Collection [/api/v1/commands]

### List all Commands [GET]

+ Response 200 (application/json)

    + Body
                
            [
                {
                    "id": 34,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Reboot my access point ",
                    "payload_name": "Reboot Access Points",
                    "payload_command": "/sbin/reboot",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 35,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Disable My Login Screens",
                    "payload_name": "Disable Login Screens",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": false
                },
                {
                    "id": 36,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Enable My Login Screens",
                    "payload_name": "Enable Login Screens",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": false
                },
                {
                    "id": 37,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Disable my private Wi-Fi network completely",
                    "payload_name": "Disable Private Wi-Fi Network",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 38,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Enable my private Wi-Fi network",
                    "payload_name": "Enable Private Wi-Fi Network",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 39,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Hide my public Wi-Fi network",
                    "payload_name": "Hide Public Wi-Fi Network",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 40,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Show my public Wi-Fi network",
                    "payload_name": "Show Public Wi-Fi Network",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 41,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Disable all Wi-Fi networks",
                    "payload_name": "Wi-Fi Down Completely",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 42,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Enable all Wi-Fi networks",
                    "payload_name": "Wi-Fi Up Completely",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                }
            ]
            
## Commands Create [/api/v1/commands{?command}]

### Create a command [POST]

+ Request 200 (application/json)

            {
                "command": 
                    {
                        "payload_description": "Reboot my access point ",
                        "payload_name": "Reboot Access Points",
                        "payload_command": "/sbin/reboot",
                        "can_schedule": true,
                        "only_polkaspots": true
                    }
            }


+ Response 200 (application/json)

    + Body
        
            {
                "id": 34,
                "payload_description": "Reboot my access point ",
                "payload_name": "Reboot Access Points",
                "payload_command": "/sbin/reboot",
                "can_schedule": true,
                "only_polkaspots": true
            }
        

## Command Details [/api/v1/commands/:id]

### Update a Command [GET]


+ Parameters

    + id (required, integer, `1`) ... ID of the command you wish to update.

+ Request (application/json)

        {"id": 34}

+ Response 200 (application/json)

    + Body
        
            {
                "id": 34,
                "payload_description": "Reboot my access point ",
                "payload_name": "Reboot Access Points",
                "payload_command": "/sbin/reboot",
                "can_schedule": false,
                "only_polkaspots": true
            }
        
## Command Update [/api/v1/commands/:id{?command}]

### Update a Command [PATCH]

+ Parameters

    + id (required, integer, `1`) ... ID of the command you wish to update.
    + command (required, params, `{some: params, included: here}`) ... An object with the parameters you want to update.

+ Request (application/json)

        {
            "command": {
                "payload_description": "Reboot my access point ",
                "payload_name": "Reboot Access Points",
                "payload_command": "/sbin/reboot",
                "can_schedule": false,
                "only_polkaspots": true
            }
        }

+ Response 200 (application/json)

    + Body
        
            {
                "id": 34,
                "payload_description": "Reboot my access point ",
                "payload_name": "Reboot Access Points",
                "payload_command": "/sbin/reboot",
                "can_schedule": false,
                "only_polkaspots": true
            }
        

## Command Delete [/api/v1/commands/{id}]

### Delete a Command [DELETE]

+ Parameters

    + id (required, integer, `1`) ... ID of the command you wish to update.

+ Request (application/json)

        {   
            "id": 123,
        }

+ Response 204 (application/json)


# Group Events

Events related resources of the **Events API**. Events run at predefined intervals on your location's boxes.

You can, for example, disable the login screens at lunch or reboot your access point in the evening.

All events run on PolkaSpots boxes (running Stinky Panda). Third party boxes may only receive a selection of events.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Events Collection [/api/v1/locations/{location_id}/events]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Events for a location [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
    
            [
                {
                    "id": 115,
                    "location_id": 870,
                    "event_hour": "09:00",
                    "event_frequency": "Daily",
                    "payload_id": 34,
                    "description": "Reboot my access point ",
                    "unique_id": "6717550402069326522",
                    "slug": null,
                    "command_hash": null,
                    "experimental": false,
                    "premium": false,
                    "active": true,
                    "created_at": "2014-09-17T18:48:23.000+01:00",
                    "updated_at": "2014-09-17T18:48:23.000+01:00"
                }
            ]

## Create an Event [/api/v1/locations/{location_id}/events{?event}]

### Create an Event [POST]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + event (required, params, `polkaspots.com`) ... parameters required for the creation of the event.

+ Request (application/json)

            {
                "event_hour": "09:00",
                "event_frequency": "Daily",
                "payload_id": 34,
                "description": "Reboot my access point ",
            }

+ Response 200 (application/json)

            {
                "id": 115,
                "location_id": 870,
                "event_hour": "09:00",
                "event_frequency": "Daily",
                "payload_id": 34,
                "description": "Reboot my access point ",
                "unique_id": "6717550402069326522",
                "slug": null,
                "command_hash": null,
                "experimental": false,
                "premium": false,
                "active": true,
                "created_at": "2014-09-17T18:48:23.000+01:00",
                "updated_at": "2014-09-17T18:48:23.000+01:00"
            }

## Delete Event [/api/v1/locations/{location_id}/events/{id}]

### Delete an Event [DELETE]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the event you wish to delete.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)

# Group Firewall Rules

Firewall Rules related resources of the **Firewall Rules API**. Firewalls are a nested in a location. You cannot currently list all your walled gardens without specifying a location id (slug).

Not all the parameters listed in this spec are supported yet.

##Allowed HTTPs requests:

    - `POST` - Creates or updates a resource
    - `PATCH` - Updates a resource
    - `GET` - Retrieves a resource or list of resources
    - `DELETE` - Delete a resource

## Firewall Rules Collection [/api/v1/locations/{location_id}/firewall_rules]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Firewall Rules [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
    
            [
                {
                    "id": 4145,
                    "chain": "FORWARD",
                    "rule_spec": "A",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.4.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 1,
                    "created_at": "February 15 2014 19:27:05",
                    "updated_at": "February 15 2014 19:27:05"
                },
                {
                    "id": 4146,
                    "chain": "FORWARD",
                    "rule_spec": "A",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.210.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 2,
                    "created_at": "February 15 2014 19:27:05",
                    "updated_at": "February 15 2014 19:27:05"
                },
                {
                    "id": 5848,
                    "chain": "FORWARD",
                    "rule_spec": "I",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.4.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 1,
                    "created_at": "September 16 2014 17:53:15",
                    "updated_at": "September 16 2014 17:53:15"
                },
                {
                    "id": 5849,
                    "chain": "FORWARD",
                    "rule_spec": "I",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.210.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 2,
                    "created_at": "September 16 2014 17:53:15",
                    "updated_at": "September 16 2014 17:53:15"
                },
                {
                    "id": 5850,
                    "chain": "FORWARD",
                    "rule_spec": "I",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.4.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 1,
                    "created_at": "September 16 2014 17:53:49",
                    "updated_at": "September 16 2014 17:53:49"
                },
                {
                    "id": 5851,
                    "chain": "FORWARD",
                    "rule_spec": "I",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.210.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 2,
                    "created_at": "September 16 2014 17:53:49",
                    "updated_at": "September 16 2014 17:53:49"
                }
            ]

## Firewall Rule Create [/api/v1/locations/{location_id}/firewall_rules{?firewall_rule}]

### Create a Firewall Rule [POST]

There's two ways to create a firewall rule. You can either post directly with a location id or you update the resource when updating a location. Please see the section within the location's group for more information. 

**CAUSES SYNC**

Please note, creating a new firewall rule will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + firewall_rule (required, object) ... A list of parameters you want to use to create the firewall rule.

+ Request (application/json)

        { "firewall_rule": 
            {
                "chain": "FORWARD",
                "rule_spec": "I",
                "protocol": null,
                "source_ip": "192.168.1.4/24",
                "source_port": null,
                "source_interface": null,
                "out_interface": null,
                "dest_ip": null,
                "dest_port": null,
                "target": "DROP",
                "limit": null,
                "c_state": null,
                "log_level": null
            }
        }
        

+ Response 200 (application/json)

        {
            "id": 594,
            "chain": "FORWARD",
            "rule_spec": "I",
            "protocol": null,
            "source_ip": "192.168.1.4/24",
            "source_port": null,
            "source_interface": null,
            "out_interface": null,
            "dest_ip": null,
            "dest_port": null,
            "target": "DROP",
            "limit": null,
            "c_state": null,
            "log_level": null,
            "location_id": 2213,
            "position": null,
            "created_at": "2014-09-17T02:10:34.708+01:00",
            "updated_at": "2014-09-17T02:10:34.708+01:00"
        }

## Firewall Rule Update [/api/v1/locations/{location_id}/firewall_rules/{id}?firewall_rule={?params}]

### Update a Firewall Rule [PATCH]

You can also update a firewall rule url by using the location's update method.

**CAUSES SYNC**

Please note, updating a firewall rule will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the walled garden you wish to update.
    + params (required, string, `params hash`) ... A list of parameters you wish to update.

+ Request (application/json)

        { "firewall_rule": 
            {
                "id": "594",
                "chain": "FORWARD",
                "rule_spec": "I",
                "protocol": null,
                "source_ip": "192.168.0.4/24",
                "source_port": null,
                "source_interface": null,
                "out_interface": null,
                "dest_ip": null,
                "dest_port": null,
                "target": "DROP",
                "limit": null,
                "c_state": null,
                "log_level": null
            }
        }

+ Response 200 (application/json)

        {
            "id": 594,
            "chain": "FORWARD",
            "rule_spec": "I",
            "protocol": null,
            "source_ip": "192.168.0.4/24",
            "source_port": null,
            "source_interface": null,
            "out_interface": null,
            "dest_ip": null,
            "dest_port": null,
            "target": "DROP",
            "limit": null,
            "c_state": null,
            "log_level": null,
            "location_id": 2213,
            "position": null,
            "created_at": "2014-09-17T02:10:34.708+01:00",
            "updated_at": "2014-09-17T02:10:34.708+01:00"
        }

## Firewall Rule Delete [/api/v1/locations/{location_id}/firewall_rules/{id}]

### Delete a Walled Garden [DELETE]

**CAUSES SYNC**

Please note, creating a new walled garden will force all your boxes to reload their group network. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the firewall rule you wish to update.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)

# Group Heartbeats

The main device heartbeats API which records when your boxes went offline and online.

Other interesting information included in this API is the last possible disconnect reason.

This will either be:

- Lost connection - no Internet found / cable disconnected
- Lost power - someone had turned it off or disconnected power.

They are a nested resource in the Boxes API.

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources

## Heartbeats Collection [/api/v1/boxes/{box_id}/heartbeats]

### List Heartbeats [GET]

+ Parameters

    + box_id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Slug `slug` of the Box to perform action with. Has example value.

+ Response 200 (application/json)

    + Body
        
            [{
                "box_id": 2217,
                "created_at": "March 29 2014 11:00:45",
                "disconnect": 'connection',
                "online": false
            },
            {
                "box_id": 2217,
                "created_at": "April 2 2014 17:51:32",
                "disconnect": 'connection',
                "online": true
            },
            {
                "box_id": 2217,
                "created_at": "April 5 2014 13:17:46",
                "disconnect": 'connection',
                "online": false
            },
            {
                "box_id": 2217,
                "created_at": "April 6 2014 07:35:02",
                "disconnect": 'connection',
                "online": true
            },
            {
                "box_id": 2217,
                "created_at": "April 6 2014 07:28:38",
                "disconnect": 'power',
                "online": false
            },
            {
                "box_id": 2217,
                "created_at": "April 8 2014 13:31:36",
                "disconnect": 'connection',
                "online": true
            }]

# Group Locations

Locations related resources of the **Locations API**

TO DO: Add a list of parameters we can access.

## Locations Collection [/api/v1/locations]

### List all Locations [GET]

+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json)

        [{
            "id": 1687,
            "location_name": "Cafe International",
            "slug": "cafe-international-f84e1979-52e4-49ff-8d6e-ed808578b36a",
            "created_at": "May 6 2014 11:47:08",
            "network_name": "PolkaSpots",
            "location_address": "12 High Lane",
            "street": "12 High Lane",
            "phone1": "02071831471",
            "location_website": null,
            "location_type": null,
            "nas_count": 1,
            "archived": false,
            "development_mode": "Production",
            "daily_limit": true
        },
        {
            "id": 870,
            "location_name": "Derby - City Council",
            "slug": "derby-city-council",
            "created_at": "August 19 2013 11:50:04",
            "network_name": "Meraki",
            "location_address": "Corporation Street Derby ",
            "street": "",
            "phone1": "01332293111",
            "location_website": "www.surfthecity.co.uk",
            "location_type": "186",
            "nas_count": 5,
            "archived": false,
            "development_mode": "Production",
            "daily_limit": true
        }]

## Locations Search [/api/v1/locations?q={search}]

### Search for locations [GET]

+ Parameters

    + q (required, string, `Some Search Text`) ... What are you looking for?

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            { "q": "derby" }

+ Response 200 (application/json)

        [{
            "id": 870,
            "location_name": "Derby - City Council",
            "slug": "derby-city-council",
            "created_at": "August 19 2013 11:50:04",
            "network_name": "Meraki",
            "location_address": "Corporation Street Derby ",
            "street": "",
            "phone1": "01332293111",
            "location_website": "www.surfthecity.co.uk",
            "location_type": "186",
            "nas_count": 5,
            "archived": false,
            "development_mode": "Production",
            "daily_limit": true
        }]

## Locations Short List [/api/v1/locations?short=yep{?q}]

Returns a mini-list of your locations. Is good for search, cloning the logins, stuff where you don't need much info.

### A consolidated list of locations [GET]

+ Parameters

    + q (optional, string, `Some Search Text`) ... What are you looking for?

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body

            { "short": "yep" }

+ Response 200 (application/json)

        [{
            "location_name": "Derby - City Council",
            "slug": "derby-city-council",
            "unique_id": "7379871298798717"
        }]

## Create a location [/api/v1/locations{?location}]

Default required params include:

- location_name
- address
- town
- postcode

You may send an array of mac addresses to create boxes associated with the location. This must follow the following convention:

    { "boxes": { "ap_mac": ["00:22:22:11:22:33", "66:22:11:22:33:44"] }

You can also send a facebook_id with your request. Doing so will cause CT to totally ignore the data you've sent. Instead, Cucumber Tony will contact Facebook and grab the information from them instead.

    { "location": { "facebook_id": "valid-fb-id" } }
    

### Create a Location [POST]

+ Parameters

    + location (required, JSON object, `location_name: derby-city-council`) ... JSON object of all the parameters you wish to create your location with.

+ Request (application/json)

        "location":
            {
                "location_name": "Derby Council",
                "address": "1 Really Long Road",
                "town": "A far away land",
                "postcode": "EC1M",
                "phone1": '01604 134 1679',
                "facebook_id": "187263871623"
            },
        "boxes":
        
            { "ap_mac": ["AA:BB:CC:DD:EE:FF:11"] }

+ Response 200 (application/json)

        {
            "id": 1768,
            "slug": "derby-ff3b5382-baa5-4ecd-945a-526427e057a1",
            "created_at": "September24201419: 07: 09",
            "attr_generated": false,
            "location_address": "62 Britton Street",
            "location_name": "PolkaSpots"
        }

## Location [/location/{id}]

A single Location object with all its details

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Retrieve a Location [GET]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "id": 870,
                "location_name": "Derby City Council",
                "unique_id": "xxx",
                "slug": "derby-city-council",
                "created_at": "August 19 2013 11:50:04",
                "updated_at": "September 8 2014 14:41:58",
                "location_info": "This Wi-Fi service is provided by Derby City Council.",
                "location_info_two": "",
                "location_address": "The High Street",
                "street": "Derby",
                "postcode": "DE1 2FS",
                "town": "Derby",
                "country": "United Kingdom",
                "website": null,
                "geocode": null,
                "email_owner": "",
                "phone1": "02071831471",
                "location_website": "www.surfthecity.co.uk",
                "sanitised_website": "surfthecity.co.uk",
                "created_by": null,
                "location_notes": null,
                "success_url": "",
                "network_name": "Meraki",
                "average_spend": null,
                "api_token": "xxx",
                "state": "stage_6",
                "archived": false,
                "newsletter_enabled": false,
                "newsletter_list_id": null,
                "newsletter_type": "0",
                "newsletter_api_token": null,
                "location_twitter": "derbymuseums",
                "latitude": null,
                "longitude": null,
                "gmaps": false,
                "passwd_change_day": null,
                "passwd_auto_gen": false,
                "ssid": "PolkaSpots Supafly Wi-Fi",
                "channel": "auto",
                "whitelist_mac": null,
                "uampass": null,
                "chilli_network": "192.168.4.0",
                "chilli_netmask": "255.255.255.0",
                "chilli_uamlisten": "192.168.4.1",
                "chilli_uamport": "3990",
                "chilli_dns1": "208.67.222.222",
                "chilli_dns2": "208.67.220.220",
                "chilli_radius": "cluster-1.polkaspots.co",
                "chilli_radius1": "cluster-2.polkaspots.co",
                "chilli_uamallow": "8.8.8.8,208.67.222.222,208.67.220.220",
                "chilli_uamsecret": "xxx",
                "encryption": "none",
                "encryption_key": null,
                "encryption_private": "psk",
                "encryption_private_key": "406c6e9b4dbe",
                "ssid_private": "PolkaSpots Private",
                "ssid_disabled": false,
                "ssid_private_disabled": true,
                "network_private": "private",
                "network": "lan",
                "network_country": "GB",
                "ssid_hidden": false,
                "ssid_private_hidden": false,
                "tx_power_2": "20",
                "tx_power_5": "20",
                "ht_mode_2": "HT20",
                "ht_mode_5": "HT20",
                "channel_5": "auto",
                "lan_ipaddr": "192.168.210.1",
                "lan_dhcp_start": 2,
                "lan_dhcp_end": 150,
                "lan_dhcp_lease": "12h",
                "wan_mtu": 1500,
                "development_mode": "Production",
                "network_settings": 1,
                "block_access_to_local": true,
                "enforce_limit": null,
                "authorised_domain": "mywifi",
                "content_filter": "Security",
                "wisp_id": 1,
                "product_order_id": null,
                "access_password": "a0da85",
                "shop_active": false,
                "access_type_description": "",
                "login_screens_disabled": false,
                "timed_access": true,
                "daily_limit": true,
                "weekly_limit": false,
                "monthly_limit": false,
                "secondary_access_active": false,
                "auto_login": true,
                "auto_login_time": 0,
                "fb_login_on": true,
                "fb_login_checkin_req": false,
                "fb_login_checkin_allow": false,
                "fb_login_leave_msg": false,
                "facebook_cover_id": null,
                "facebook_cover_url": null,
                "social_login_vouchers": false,
                "use_ps_twillio": true,
                "twillio_from_number": null,
                "twillio_username": null,
                "twillio_token": null,
                "default_currency": "GBP",
                "foursq_id": "4b9fb6e4f964a520c13737e3",
                "foursq_category": null,
                "foursq_name": null,
                "foursq_verified": false,
                "foursq_url": null,
                "facebook_products": null,
                "facebook_username": "derbymuseums",
                "facebook_id": "",
                "facebook_link": "http://facebook.com/derbymuseums",
                "facebook_hours": null,
                "google_url": null,
                "google_hours": null,
                "google_reference": null,
                "add_to_global_map": true,
                "login_header_image": 2,
                "login_background_image": 2,
                "login_css_heading_text_colour": "#ffffff",
                "login_css_body_text_colour": "#796f66",
                "login_css_border_colour": "#9dd8dd",
                "login_css_link_colour": "#ffffff",
                "login_css_container_colour": "#9dd8dd",
                "login_css_container_transparency": "1",
                "login_css_button_colour": "#000000",
                "login_css_header_colour": "#5F7883",
                "login_css_error_colour": "#a12c6c",
                "login_terms_url": "http://polkaspots.com/wifi-terms",
                "location_image_file_name": "STC.png",
                "logo_file_name": "",
                "logo_content_type": "image/png",
                "body_background_color": "#9dd8dd",
                "background_file_name": "white.jpg",
                "login_design": 1,
                "login_words_position": "Left",
                "login_logo_position": "Left",
                "custom_css": null,
                "login_container_inner_width": "95%",
                "login_bg_dimension": "full",
                "login_css_heading_text_size": "40px",
                "login_css_heading_2_text_size": "18px",
                "login_css_heading_2_text_colour": "#796f66",
                "login_css_heading_3_text_size": "18px",
                "login_css_heading_3_text_colour": "#796f66",
                "login_button_text": "Login Now",
                "fsq_login_checkin_allow": false,
                "font_family": "'Helvetica Neue',sans-serif",
                "login_btn_font_size": "18px",
                "login_btn_font_colour": "#d396c3",
                "container_width": "600px",
                "logins_forgot_password": false,
                "external_css_url": null,
                "skip_user_registration": false,
                "remove_registration_link": false,
                "logins_redirect_url": null,
                "font_size": "15px",
                "location_header": "Welcome to Surf the City",
                "li_login_on": false,
                "flume_enabled": false,
                "meraki_validator": null,
                "attr_generated": true,
                "location_categories": "Government Building"
            }

### Update a Location [PATCH]

  TBC
    
+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

### Remove a Location [DELETE]

 TBC

+ Response 204

## Location Statistics [/location/{id}/stats]

A single Location's statistical objects

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Retrieve a Location's Statistics [GET]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "slug": "derby-city-council",
                "lat": null,
                "lon": null,
                "sessions": 0,
                "uniques": 0,
                "minutes_online": 0,
                "downloads": 0,
                "busiest_hr": null,
                "busiest_day": null,
                "total_sales": 0,
                "qnty_sales": 0,
                "range": "07/28/2014 - 09/08/2014",
                "chart_series": {
                    "Sessions": "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                    "Unique users": "[0,16,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]"
                },
                "audience": [],
                "loyalty": {
                    "new": 0,
                    "returning": null
                },
                "geojson": [
                    {
                        "lat": null,
                        "lon": null,
                        "title": "Derby City Council 6",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby City Council 6",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    },
                    {
                        "lat": "28.15303332447874",
                        "lon": "-60.83188607793834",
                        "title": "Derby City Council",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby City Council",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    },
                    {
                        "lat": "-24.1850770453765",
                        "lon": "-162.5053433148802",
                        "title": "Derby City Council",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby City Council",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    },
                    {
                        "lat": "-39.74956573964626",
                        "lon": "176.4442398543561",
                        "title": "Derby Council 2",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby Council 2",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    },
                    {
                        "lat": null,
                        "lon": null,
                        "title": "Derby - City Council 6",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby - City Council 6",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    }
                ],
                "top_boxes": []
            }
                
## Location Access Settings [/location/{id}/access]

A single Location's access settings. Use this to adjust the type of login screens you want to offer, download speeds or even activate social logins.

The list of parameters you can update using this action are listed below. If you need to update those not listed, use vanilla **update**.
+ Parameters
    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Retrieve a Location's Access Settings [GET]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "slug": "derby-city-council",
                "location_name": "Derby City Centre",
                "timed_access": true,
                "passwd_auto_gen": true,
                "email_owner": "bob@ps.com",
                "access_password": "a0da85",
                "passwd_change_day": [
                    "0",
                    "1",
                    "2"
                ],
                "daily_limit": false,
                "weekly_limit": false,
                "monthly_limit": true,
                "logins_forgot_password": false,
                "fb_login_on": true,
                "li_login_on": false,
                "facebook_id": "derbymuseums",
                "facebook_username": "derbymuseums",
                "fb_page_cache_processing": false,
                "fb_login_checkin_allow": false,
                "shop_allowed": true,
                "shop_active": false,
                "secondary_access_active": true,
                "secondary_access_allowed": true,
                "access_types": {
                    "primary_access": {
                        "name": "Social",
                        "id": 7
                    },
                    "secondary_access": {
                        "name": "Password",
                        "id": 1
                    }
                },
                "policy": {
                    "id": 1189,
                    "maximum_data_rate_upstream": 1024,
                    "maximum_data_rate_downstream": 8448,
                    "max_daily_session": 60,
                    "max_weekly_session": 22,
                    "max_monthly_session": 604,
                    "session_timeout": 1440,
                    "idle_timeout": 120,
                    "simultaneous_use": 22
                },
                "shop": {
                    "id": 2,
                    "shop_name": "The Bridge Street Collective Wi-Fi",
                    "unique_id": "ssss7876xs"
                },
                "facebook_page_valid": false,
                "sms_details_valid": [],
                "available_access_types": [
                    {
                        "name": "Password",
                        "id": 1
                    },
                    {
                        "name": "Vouchers",
                        "id": 2
                    },
                    {
                        "name": "Clickthrough",
                        "id": 3
                    },
                    {
                        "name": "Facebook",
                        "id": 6
                    },
                    {
                        "name": "Social",
                        "id": 7
                    }
                ],
                "available_secondary_access": [
                    {
                        "name": "Password",
                        "id": 1
                    },
                    {
                        "name": "Vouchers",
                        "id": 2
                    },
                    {
                        "name": "Clickthrough",
                        "id": 3
                    },
                    {
                        "name": "Facebook",
                        "id": 6
                    },
                    {
                        "name": "Social",
                        "id": 7
                    }
                ]
            }
            
### Update a Location's Access Settings [PATCH]

+ Request (application/json)

    time_limit == ['daily', 'weekly', 'monthly']

    + Header
    
                Accept: application/json


    + Body
    
            { "location": 
                {
                    "slug": "derby-city-council",
                    "location_name": "Derby City Centre",
                    "timed_access": true,
                    "passwd_auto_gen": true,
                    "email_owner": "simon@ps.com",
                    "access_password": "a0da85",
                    "passwd_change_day": [
                        "0",
                        "1",
                        "2"
                    ],
                    "time_limit": 'daily',
                    "logins_forgot_password": false,
                    "fb_login_on": true,
                    "li_login_on": false,
                    "facebook_id": "derbymuseums",
                    "facebook_username": "derbymuseums",
                    "fb_login_checkin_allow": false,
                    "fb_login_leave_msg": false,
                    "secondary_access_active": true,
                    "secondary_access_allowed": true,
                    "shop_active": true,
                    "access_types": {
                        "primary_access": {
                            "name": "Social",
                            "id": 7
                        },
                        "secondary_access": {
                            "name": "Password",
                            "id": 1
                        }
                    },
                    "available_access_types": [
                        {
                            "name": "Password",
                            "id": 1
                        },
                        {
                            "name": "Vouchers",
                            "id": 2
                        },
                        {
                            "name": "Clickthrough",
                            "id": 3
                        },
                        {
                            "name": "Facebook",
                            "id": 6
                        },
                        {
                            "name": "Social",
                            "id": 7
                        }
                    ],
                    "available_secondary_access": [
                        {
                            "name": "Password",
                            "id": 1
                        },
                        {
                            "name": "Vouchers",
                            "id": 2
                        },
                        {
                            "name": "Clickthrough",
                            "id": 3
                        },
                        {
                            "name": "Facebook",
                            "id": 6
                        },
                        {
                            "name": "Social",
                            "id": 7
                        }
                    ]
                    "policy": {
                        "maximum_data_rate_upstream": 1024,
                        "maximum_data_rate_downstream": 8448,
                        "max_daily_session": 60,
                        "max_weekly_session": 22,
                        "max_monthly_session": 604,
                        "session_timeout": 1440,
                        "idle_timeout": 120,
                        "simultaneous_use": 22
                    },
                    "shop": {
                        "shop_name": "The Bridge Street Collective Wi-Fi",
                        "unique_id": "2927039401028770904"
                    },
                }
            }

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            { }
            
## Verify a Facebook Page [/location/{id}/fb_verify_page?page_id={page_id}]

Checks if your Facebook page is valid or not. Will return a 422 Unprocessable Entity if it's not a valid page.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + page_id (required, string, `derbycouncil`) ... Page ID `page_id` of the page you want to test. Has example value.

### Determines if your Facebook page id is valid [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body 
    
            { "id": "derby-council", page_id: "123123123" }
    
+ Response 200 (application/json)

    + Body
    
            { "message": "This is a valid page" }

## Get a list of your Facebook Pages [/location/{id}/fb_get_pages?auth={authResponse}]

This will create a background job to get a list of your Facebook page ids. The first request will create the job - you will receive a 422 error if you post again within 5 minutes while the job's processing. Once we've collected your pages, we'll return them as a JSON object.

You need to send us your Facebook accessToken for us to get these. We recommend using the FB JS SDK to get this. **We do not have a public API to generate these details.**

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + auth (required, json, `{"accessToken": "your_facebook_auth_token", "userId": "your_id", "expiresIn": 86400}`) ... A JSON object containing a accessToken, userId and expiresIn values. These come straight from the FB api.
    
### Gets a list of your Facebook pages [POST]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body
    
            { "message": "Getting a list of your pages" }

+ Response 201 (application/json)

    + Header

            Accept: application/json

    + Body
    
            { 
                "pages": [
                    {
                        "category": "Internet/software",
                        "category_list": [
                            {
                                "id": "2256",
                                "name": "Internet/Software"
                            }
                        ],
                        "name": "PolkaSpots",
                        "access_token": "xxx",
                        "perms": [
                            "ADMINISTER",
                            "EDIT_PROFILE",
                            "CREATE_CONTENT",
                            "MODERATE_CONTENT",
                            "CREATE_ADS",
                            "BASIC_ADMIN"
                        ],
                        "id": "185269478190861"
                    },
                    {
                        "category": "Community",
                        "name": "Public Wi-Fi",
                        "access_token": "xxx",
                        "perms": [
                            "ADMINISTER",
                            "EDIT_PROFILE",
                            "CREATE_CONTENT",
                            "MODERATE_CONTENT",
                            "CREATE_ADS",
                            "BASIC_ADMIN"
                        ],
                        "id": "138118009562188"
                    },
                    {
                        "category": "Product/service",
                        "name": "Smart Wi-Fi",
                        "access_token": "xxx",
                        "perms": [
                            "ADMINISTER",
                            "EDIT_PROFILE",
                            "CREATE_CONTENT",
                            "MODERATE_CONTENT",
                            "CREATE_ADS",
                            "BASIC_ADMIN"
                        ],
                        "id": "148495501855997"
                    }
                ]
            }

+ Response 422 (application/json)

    + Header

            Accept: application/json

    + Body
    
            { "message": "Already processing a request." }

## Location layouts [/location/{id}/layout]

Some params that are just required for the login pages. You may also use the standard location#show method however this is optimised for speed and includes only the attributes you need. Update the settings with a standard PATCH UPDATE.

Remarkably, you can send any image reference back as url. Either you use our content delivery network (CDN) by uploading a photo using Cucumber Tony. Or, just post a valid URL back. And then make sure you've added the domain to your walled gardens.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Retrieve a Location's Layout Settings [GET]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "location_name": "Derby City Centre",
                "slug": "derby-city-council",
                "unique_id": "8798727298729872",
                "login_design": 1,
                "login_header_image": 1,
                "login_logo_position": "Left",
                "login_background_image": 1,
                "body_background_color": "#FFFFFF",
                "clone_logins_processing": false,
                "logo_file_name": null,
                "background_file_name": null,
                "location_header": "Welcome to Surf the City Poo",
                "location_info": "This Wi-Fi service is provided by Derby City Council.",
                "location_info_two": "",
                "location_website": "www.surfthecity.co.uk",
                "address_string": "12 Big Lane",
                "login_css_heading_text_colour": "#5c7883",
                "login_css_heading_2_text_colour": "#333333",
                "login_css_heading_3_text_colour": "#333333",
                "login_css_body_text_colour": "#575757",
                "login_css_border_colour": "#cccccc",
                "login_css_link_colour": "#381515",
                "login_css_container_colour": "#ffffff",
                "login_css_container_transparency": "1",
                "login_css_button_colour": "#000000",
                "login_css_header_colour": "#5F7883",
                "login_css_error_colour": "#ed561b",
                "font_family": "'Courier New', Courier, monospace",
                "login_btn_font_size": "18px",
                "login_btn_font_colour": "#000000",
                "container_width": "600px",
                "login_container_inner_width": "95%",
                "login_bg_dimension": "full",
                "login_css_heading_text_size": "24px",
                "login_css_heading_2_text_size": "18px",
                "login_css_heading_3_text_size": "15px",
                "font_size": "15px",
                "login_button_text": "Login Now",
                "login_container_float": "Center",
                "external_css_allowed": true
            }
        
## Duplicate / Clone Login Pages [/location/{id}/duplicate_logins?location_ids={location_ids}]

Clone the login design from the location to another one of your locations. Location IDS of the locations to receive the new designs can be passed as an array in the query string.

+ Parameters
    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + location_ids (required, array, `[123,456,798]`) ... Array `location_ids` of the locations you want to *get* the new designs. Has example value.

### Retrieve a Location's Layout Settings [POST]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {"message": "Your logins have been queued for duplication. This may take a few minutes."}

## Get Location Users [/location/{id}/users]

Get a list of all the users who have access to your location. The output will include four keys - **owner, admins, invites, watchers**

- The owners object contains details of the primary user's plan.
- The admin users object contains all users will admin rights to the location.
- The invites object represents and invitations which have been sent recently.
- The watchers object containts non-admin, read only users for the location

+ Parameters
    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Get a list of location users and watchers [GET]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            { "id": "derby-city-council" }

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "location_name": "Derby City Centre",
                "unique_id": "432692681892998301233",
                "slug": "derby-city-council",
                "admin_users": {
                    "admins": [
                        {
                            "email": "bob@derby.gov.uk",
                            "username": "Bob Marley",
                            "unique_id": "29789523",
                            "slug": "bob-marley"
                        },
                        {
                            "email": "support@polkaspots.com",
                            "username": "Steve Jobs",
                            "unique_id": "82052203",
                            "slug": "steve-jobs"
                        }
                    ],
                    "watchers": [
                        {
                            "name": "Simon Stanley",
                            "token": "e598110e2109b4189d61d3629aec21f5b69c5b375659d8401f9f4274367ecb50",
                            "id": 103,
                            "unique_id": "HKJHSH86"
                        }
                    ],
                    "owner": {
                        "username": "Barry White",
                        "slug": "barry-white",
                        "unique_id": "206923464",
                        "email": "barry@derby.gov.uk",
                        "plan_name": "Enterprise",
                        "max_location_users": 10
                    },
                    "invites": [
                        {
                            "token": "e7adddb4e68a6f250a57b3f7b1dd31e3",
                            "email": "user@polkaspots.com",
                            "created_at": "1410737982"
                        },
                        {
                            "token": "e924c0ae9ea4a462a55dbd7be6d0ee23",
                            "email": "user2@polkaspots.com",
                            "created_at": "1410737979"
                        },
                        {
                            "token": "a863527a40c694173d59ef5c5201d307",
                            "email": "user3@polkaspots.com",
                            "created_at": "1410737976"
                        }
                    ]
                }
            }

## Add a user to a location [/location/{id}/users?email={email}]

The number of users you can add to a location depends on the primary user's plan. You can't add the same user twice.

If you invite a user who's already got a Cucumber Tony account, the location you add them too will be added to their account and they will receieve an email with these details.

For new users (those without an account), they will receive an invitation to join CT. **They have three days to accept this invitation**, after which, you will need to invite them again.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + email (required, string, `user@address.com`) ... Email `email` of the user you want to add to the location.
    
### Add a new user to a location [POST]

+ Request (application/json)

        { "email": "steveo@ps.com" }

+ Response 200 (application/json)


    + Body

            { "message": "Congrats, you've successfully invited stevo@ps.com" } 

## Delete an admin user from a  location [/location/{id}/users?user_id={user_id}&token={token}]

Only admins (owners) can do this. It's not possible to delete yourself.

You can either send a user_id of an admin user or the token of an invited user. Use the token if you want to revoke a recent invitation to a user who's not already signed up.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + user_id (string, `918273918723`) ... Unique ID `unique_id` of the user you want to delete from the location.
    + token (string, `HGVSGSKJHHA87&Ah`) ... Token of a recently invited user
    
### Add a new user to a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body    

            { "user_id": "1298391827391827" }

+ Response 200 (application/json)

    + Body

            { "message": "Successfully deleted user" } 

+ Response 422 (application/json)

    + Body

            { "message": "You cannot delete yourself from this location" } 

## Watch a specific location [/location/{id}/watchers?{?user_ids}]

You can add users to a location who have no rights and can only observe. These users can receive alerts but cannot make changes.

This job is processed in the background and you may have to wait a few moments for the change to occur.

A status attribute is set called **watchers_processing** which is available using the show action. It will either be:

- Removing
- Adding
- False

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + user_ids (required, string, `918273918723`) ... An array of user's unique_ids that you want to add to the watchers list.

### List watchers for a location [GET]

+ Request (application/json)

            {}
            
+ Response 200 (application/json)


    + Body

            {  } 

### Add a new watchers to a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body

            { "user_ids": "918273918273" }

+ Response 200 (application/json)

    + Headers
    
            Accept: application/json

    + Body

            { "message": "Congrats, you've successfully invited stevo@ps.com" } 

### Remove a watcher from a location [DELETE]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body 
    
            { "user_ids": "918273918273" }


+ Response 200 (application/json)

    + Headers
    
            Accept: application/json

    + Body

            { "message": "Your request has been queued" } 

## Clone a specific location [/location/{id}/duplicate{?location_name,address,users}]

Create a carbon copy of a location.

This job is processed in the background and you can't copy a location while there's already a clone in process. To check for the clone status, use the show action and attribute **clone_processing**. This will be true if there's a job underway.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + location_name (required, string, `My New Site`) ... The name of the new location.
    + address (required, string, `12 High Road, Derby D11`) ... The address of the new location, also required.
    + users (not-required, string, `true`) ... You can also copy existing admin users to the new location by setting this flag.

### Duplicate a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            {
                "id": "derby-council",
                "location_name": "My New Site",
                "address": "12 High Road, Derby D1",
                "users": 'any-value'
            }

+ Response 200 (application/json)

    + Body

            { "message": "Your location has been queued for duplication. This may take a few minutes." } 

## Archive a specific location [/location/{id}/archive]

If you don't want to delete a location permanently, you can choose to archive it instead. Archived locations don't count towards your quota and you cannot use an archived location for public access.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Archive a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            { "id": "derby-council", }

+ Response 200 (application/json)

    + Body

            { "message": "Your location has been archived" } 

## Restore / Unarchive a specific location [/location/{id}/unarchive]

Restore an archived location to it's former glory.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Archive a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
          
            { "id": "derby-council" }

+ Response 200 (application/json)

    + Body

            { "message": "Your location has been unarchived" } 

## Update a Location's firewall rules [/api/v1/location/{id}{?location,firewall_rules_attributes,params}]

You can either create firewall rules directly with the Firewall Rules API or you may update, create and delete when updating a location.

You must wrap the firewall_rules_attributes params in the location params. 

To delete a rule, simply set the _destroy field to 1.

By sending the ID of the firewall rule, we will assume you're going to update the values.

**NOTES**

Whilst it's ok to send the whole location object back when updating the firewall rules, your response times will be faster if you reduce the size of the request (see request below for an example). We'd recommend sending only the required location params back, id, slug and any others you may want to update.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + location (required, object ) ... An object which contains the firewall rule attributes
    + firewall_rules_attributes (required, object ) ... An object of firewall rule attributes

### Update your firewall rules [PATCH]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            {"location":
                {
                    "slug": "derby-city-council",
                    "id": 870,
                    "block_access_to_local": true,
                    "firewall_rules_attributes": [
                        {
                            "id": 5850,
                            "chain": "FORWARD",
                            "rule_spec": "I",
                            "string_patch": null,
                            "protocol": null,
                            "source_ip": "192.168.4.124",
                            "source_port": 12,
                            "source_interface": null,
                            "out_interface": null,
                            "dest_ip": "local",
                            "dest_port": 34,
                            "target": "ACCEPT",
                            "limit": null,
                            "c_state": null,
                            "log_level": null,
                            "location_id": 870,
                            "position": 1
                        },
                        {
                            "id": 5851,
                            "chain": "FORWARD",
                            "rule_spec": "I",
                            "string_patch": null,
                            "protocol": null,
                            "source_ip": "192.168.210.124",
                            "source_port": null,
                            "source_interface": null,
                            "out_interface": null,
                            "dest_ip": "local",
                            "dest_port": null,
                            "target": "ACCEPT",
                            "limit": null,
                            "c_state": null,
                            "log_level": null,
                            "location_id": 870,
                            "position": 2
                        },
                        {
                            "id": 5852,
                            "chain": "FORWARD",
                            "rule_spec": "A",
                            "string_patch": null,
                            "protocol": null,
                            "source_ip": "192.168.4.124",
                            "source_port": 1212,
                            "source_interface": null,
                            "out_interface": null,
                            "dest_ip": "local",
                            "dest_port": 1212,
                            "target": "ACCEPT",
                            "limit": null,
                            "c_state": null,
                            "log_level": null,
                            "location_id": 870,
                            "position": null,
                            "_destroy": "1"
                        }
                    ]
                }
            }

+ Response 200 (application/json)

    + Body

            { "message": "You have updated Derby Council" } 

## Test your newsletter settings [/api/v1/locations/{location_id}/newsletter_test]

After you've created your newsletter, we can programatically test if your credentials are correct.

This entails calling either the MailChimp or Campaign Monitor APIs and adding an email. If it's a success, we'll post the results back with the location parameter **newsletter_test_results**. This will be one of the following:

- NULL - test not run or key expired
- true - test passed, everything is ok
- false - test failed, please try new credentials

### Test your newsletter settings [POST]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

+ Request (application/json)
    
        {
            "id": "your-id",
        }

+ Response 200 (application/json)

        {
            "message": "Successfully created payload to test newsletter.",
            "status": "processing"
        }
        
# Group Jobs

Jobs, or events as they should really be named, are things that happen to your boxes. Jobs include device heartbeats, payload commands and more. 

They are a nested resource in the Boxes API.

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources

## Jobs Collection [/api/v1/boxes/{box_id}/jobs]

You can filter the log_level betweeen 1 and 3.

### List Box jobs [GET]

+ Parameters

    + box_id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Slug `slug` of the Box to perform action with. Has example value.

+ Response 200 (application/json)

    + Body
    
            [{
                "resource": "nas",
                "log_level": 1,
                "private": null,
                "event_id": "a563101c78f51a1c308b1bb3b0d1d9f3",
                "user_id": null,
                "data": {
                    "timestamp": 1412212262,
                    "resource_id": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "message": "device heartbeat",
                    "mac": null,
                    "type": "state_event",
                    "nas": {
                        "state": null
                    }
                }
            },
            {
                "resource": "nas",
                "log_level": 3,
                "private": null,
                "event_id": "fbaafd9701de91b50d40fd60ca184a1f",
                "user_id": null,
                "data": {
                    "timestamp": 1412212261,
                    "resource_id": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "message": "Box with mac DC-9F-DB-3D-AC-49 went queued",
                    "mac": "DC-9F-DB-3D-AC-49",
                    "type": "state_event",
                    "nas": {
                        "state": "queued"
                    }
                }
            },
            {
                "resource": "nas",
                "log_level": 3,
                "private": null,
                "event_id": "1bf3e698075d27366eb6476de15dced3",
                "user_id": null,
                "data": {
                    "timestamp": 1412212261,
                    "resource_id": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "message": "Box with mac DC-9F-DB-3D-AC-49 went queued",
                    "mac": "DC-9F-DB-3D-AC-49",
                    "type": "state_event",
                    "nas": {
                        "state": "queued"
                    }
                }
            }]
        
# Group Metrics

Numerous end-points are provided which provide aggregated reporting data about your networks and usage.

Some are only available to enterprise users or those using the sense service.

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources

## Average Dwells [/api/v1/metrics/{?dwell,location_id}]

Displays a list of average dwell times for all your locations. Filter results by passing the location_id parameter in as an array of your location ids.

The results _id parameter is equivalent to the mac address of the box. avgStay is in seconds.

+ Parameters

    + location_id (optional, integer, `1,2,3`) ... Array of location IDs to filter the results.

### Average dwell times [GET]

+ Response 200 (application/json)

    + Body

            {
                "dwells": [
                    {
                        "_id": "00-22-0A-21-8D-14",
                        "avgStay": 872636.98732
                    },
                    {
                        "_id": "00-18-0A-21-8D-14",
                        "avgStay": 872636.32636
                    },
                    {
                        "_id": "11-22-33-44-55-99",
                        "avgStay": 6774.9987982
                    }
                ]
            }    

## Location Dwells [/api/v1/metrics/{?dwell_location,location_id}]

A summary table providing aggregated stats ordered by location. 

+ Parameters

    + location_id (optional, integer, `1,2,3`) ... Array of location IDs to filter the results.

### Average dwell times [GET]

+ Response 200 (application/json)

    + Body
    
## Daily Dwells [/api/v1/metrics/{?dwell_daily,location_id}]

A summary table providing aggregated stats ordered by day. 

+ Parameters

    + location_id (optional, integer, `1,2,3`) ... Array of location IDs to filter the results.

### Average dwell times [GET]

+ Response 200 (application/json)

    + Body

## Aggregrated Daily [/api/v1/metrics/{?dwell_aggs,location_id}]

Similar to the above, this request provides aggregated daily dwell times. 

+ Parameters

    + location_id (optional, integer, `1,2,3`) ... Array of location IDs to filter the results.

### Average dwell times [GET]

+ Response 200 (application/json)

    + Body

## Sense [/api/v1/metrics/{?sense,location_id}]

Raw sense data (Meraki, Xirrus). 

+ Parameters

    + location_id (optional, integer, `1,2,3`) ... Array of location IDs to filter the results.

### Average dwell times [GET]

+ Response 200 (application/json)

    + Body

# Group Networks

Networks related resources of the **Networks API**. Networks are a nested in a location. 

You currently have two pre-defined networks on your box and two SSIDs. Public and private. 

##Allowed HTTPs requests:

- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Networks Collection [/api/v1/locations/{location_id}/networks]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Networks [GET]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
        
            [{
                {
                    "id": 5737,
                    "network_name": "public",
                    "description": "Primary network",
                    "position": 1,
                    "active": true,
                    "network_radio_mode": null,
                    "switch_ports_enabled": null,
                    "vlan_type": null,
                    "interface_id": null,
                    "interface_name": "tun0",
                    "interface_type": null,
                    "interface_proto": null,
                    "interface_ipaddr": "192.168.4.1",
                    "interface_netmask": "24",
                    "vlan_id": null,
                    "dhcp_start": 100,
                    "dhcp_end": 250,
                    "dhcp_lease": null,
                    "dhcp_limit": null,
                    "captive_portal_url": null,
                    "captive_portal_network": "192.168.4.0",
                    "captive_portal_netmask": "255.255.255.0",
                    "captive_portal_gateway": "192.168.4.1",
                    "captive_portal_port": 3990,
                    "captive_portal_dns_1": "208.67.222.222",
                    "captive_portal_dns_2": "208.67.220.220",
                    "captive_portal_uamsecret": "163de366f42a21b1b4d7de655eae1c7d",
                    "captive_portal_allowed_hosts": "8.8.8.8,208.67.222.222,208.67.220.220",
                    "content_filter": "Security"
                    "captive_portal_allowed_macs": "",
                    "radius_host_1": "cluster-1.polkaspots.co",
                    "radius_host_2": "cluster-2.polkaspots.co",
                    "radius_secret_1": "b2ea72c68d50",
                    "radius_secret_2": "b2ea72c68d50",
                    "ssid": "PolkaSpots Supafly Wi-Fi",
                    "radio_channel_0": "auto",
                    "radio_channel_1": "auto",
                    "encryption_type": "psk2",
                    "encryption_key": "asdfasdfasd",
                    "ssid_disabled": false,
                    "ssid_hidden": true,
                    "created_at": "2014-09-16T19:38:22.000+01:00",
                    "dhcp_enabled": true,
                    "dhcp_relay_on": true,
                    "config_type_bridge": false,
                    "bridge_to_switch_ports": false,
                },
                {
                    "id": 5738,
                    "network_name": "private",
                    "description": "Secondary network",
                    "position": 2,
                    "active": true,
                    "network_radio_mode": null,
                    "switch_ports_enabled": null,
                    "vlan_type": null,
                    "interface_id": null,
                    "interface_name": "br-private",
                    "interface_type": null,
                    "interface_proto": null,
                    "interface_ipaddr": "192.168.210.1",
                    "interface_netmask": "24",
                    "vlan_id": null,
                    "dhcp_start": 2,
                    "dhcp_end": 150,
                    "dhcp_lease": null,
                    "dhcp_limit": null,
                    "captive_portal_url": null,
                    "captive_portal_network": "192.168.4.0",
                    "captive_portal_netmask": "255.255.255.0",
                    "captive_portal_gateway": "192.168.4.1",
                    "captive_portal_port": 3990,
                    "captive_portal_dns_1": "198.153.192.40",
                    "captive_portal_dns_2": "198.153.194.50",
                    "captive_portal_uamsecret": null,
                    "captive_portal_allowed_hosts": null,
                    "captive_portal_allowed_macs": null,
                    "content_filter": "Security"
                    "radius_host_1": "radius-1.polkaspots.co",
                    "radius_host_2": "radius-2.polkaspots.co",
                    "radius_secret_1": null,
                    "radius_secret_2": null,
                    "ssid": "PolkaSpots Private",
                    "radio_channel_0": "auto",
                    "radio_channel_1": "auto",
                    "encryption_type": "psk2",
                    "encryption_key": "406c6e9b4dbe",
                    "ssid_disabled": null,
                    "ssid_hidden": null,
                    "created_at": "2014-09-16T19:38:22.000+01:00",
                    "dhcp_enabled": true,
                    "dhcp_relay_on": true,
                    "config_type_bridge": false,
                    "bridge_to_switch_ports": false
                }
            }]
        
## Network Details [/api/v1/locations/{location_id}/networks/{id}]

### Update a Network [GET]

You have four options for content filtering / DNS. If you pass one of the three options with the content filter, your DNS settings will be overriden:

- Security
- Family
- Danger
- Adult

These are case insenstive.

If you want to set your own DNS, please pass 'None' as a content filtering parameter. If you set the DNS to nil values, they will be reset to 8.8.8.8 and 8.8.4.4

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the network you wish to update.

+ Request (application/json)

    + Headers
    
            Accept: application/json
    
    + Body
    
            {   
                "location_id": "derby-council",
                "id": 123
            }

+ Response 200 (application/json)

    + Body
    
            {
                "100": null,
                "id": 610,
                "location_id": 1759,
                "description": "Primary network",
                "position": 1,
                "network_name": "public",
                "active": true,
                "network_radio_mode": null,
                "switch_ports_enabled": null,
                "vlan_type": null,
                "interface_id": null,
                "interface_name": "tun0",
                "interface_type": null,
                "interface_proto": null,
                "interface_ipaddr": "192.168.4.1",
                "interface_netmask": "24",
                "vlan_id": null,
                "dhcp_start": 100,
                "dhcp_end": 250,
                "dhcp_lease": null,
                "12h": null,
                "dhcp_limit": null,
                "captive_portal_url": null,
                "captive_portal_network": "192.168.4.0",
                "captive_portal_netmask": "255.255.255.0",
                "captive_portal_gateway": "192.168.4.1",
                "captive_portal_port": 3990,
                "captive_portal_dns_1": "208.67.222.222",
                "captive_portal_dns_2": "208.67.220.220",
                "captive_portal_uamsecret": "52ea627a236c7043adc36bbd463d6bf4",
                "captive_portal_allowed_hosts": "8.8.8.8,208.67.222.222,208.67.220.220",
                "captive_portal_allowed_macs": null,
                "content_filter": "Off"
                "radius_host_1": "rad-1.polkaspots.com",
                "radius_host_2": "rad-1.polkaspots.com",
                "radius_secret_1": "3543f9e498e8",
                "radius_secret_2": "3543f9e498e8",
                "ssid": "PolkaSpots Supafly Wi-Fi",
                "radio_channel_0": "auto",
                "radio_channel_1": "auto",
                "encryption_type": "none",
                "encryption_key": null,
                "ssid_disabled": false,
                "ssid_hidden": false,
                "created_at": "2014-09-17T01:09:45.000+01:00",
                "updated_at": "2014-09-17T01:09:45.000+01:00",
                "dhcp_enabled": true,
                "dhcp_relay_on": true,
                "config_type_bridge": false,
                "bridge_to_switch_ports": false
            }

## Network Update [/api/v1/locations/{location_id}/networks/{id}{?location_network}]

### Update a Network [PATCH]

**CAUSES SYNC**

Please note, updating a network will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the network you wish to update.
    + location_network (required, object) ... A full list of parameters you wish to update.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
            "location_network: {
                "ssid_hidden": true,
                "config_type_bridge": false,
                "radio_channel_0": "auto"
            }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "location_id": 1636,
            "url": "google.com",
            "created_at": "2014-09-17T00:15:57.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

# Group Payloads

Payloads are commands which run remotely on boxes. You must specify a valid command's unique id / slug for them to run.

There's several ways to run command on a box and you can run payloads on multiple boxes at a time.

Commands are usually run on boxes directly using the nested payloads resource. However, if you want to run on multiple boxes, you may send in box_ids as an array. More information in a moment.

Use the Commands API to get a list of commands.

Popular Payloads include rebooting a box, disabling login screens and running firmware updates.

You can:

- Run a single command on a box.
- Run a single command on many boxes.
- Run a firmware update on a single box.
- Run a firmware update on many boxes.
- Schedule a firmware update to run on a single box.
- Schedule a firmware update to run on many boxes.

The available options include:

- `POST` - Creates or updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

Optionally, you can choose to save the output of a command in a BLOB >!*. Just send the **save** parameter with your POST request.

## Payloads collection [/api/v1/boxes/{box_id}/payloads]

### List payloads [GET]

+ Parameters

    + box_id (required, string, `ABCDEF`) ... Slug / ID of the box you want to request payloads for. Has example value.

    
+ Response 200 (application/json)
    
    + Body
    
            [{
                "created_at": "April 5 2014 23:34:42",
                "body": "[ 0.000000] Linux version 3.3.8
            },
            {
                "created_at": "May2201323: 22: 22",
                "body": "rebootedat9am"
            },
            {
                "created_at": "Jan5201403: 34: 28",
                "body": "No output"
            }]

## View a Payload [/api/v1/boxes/{box_id}/payloads/{id}]

### Get a payload [GET]

+ Parameters

    + id (required, integer, `123`) ... ID of the payload you want to view. Has example value.
    + box_id (array / string, `BMBCKJHS`) ... The slugs of the device you want to view payload for.


+ Request (application/json)

        { "id": "123" }

+ Response 200 (application/json)

    + Body
    
            {
                "created_at": "April 5 2014 23:34:22",
                "body": "uptime 12 days, 1 min, load 1 2 3"
            }

## Create payload a box [/api/v1/boxes/{box_id}/payloads{?command_id,box_ids,upgrade,scheduled}]

### Send a payload [POST]

If you pass in an array of box ids, your payload will not run on the box you're using to authorise the request. In this case, the box with {id}.

+ Parameters

    + box_id (required, string, `ZOWso8IMhuwYTrdh`) ... Slug `slug` of the Box to perform action with. Has example value.
    + command_id (string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Unique ID of the command you want to send to the box.
    + box_ids (array / string, `HSKJHKJH,BMBCKJHS`) ... The slugs of the devices you want to receive the payloads.
    + upgrade (boolean `true`) ... Send a true value and we will upgrade all the boxes you have sent and ignore the command.
    + scheduled (string `12am tomorrow`) ... Send the time you want the upgrade to occur. Applies to upgrades only.

+ Request (application/json)

        { "payload":
                {
                    "command_id": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "box_ids": ['ID', 'ID2', 'ID3'],
                    "upgrade": true,
                    "scheduled": "Tonight at 4pm",
                }
        }

+ Response 201 (application/json)

        { message: "Device payload initiated." }

+ Response 422 (application/json)

        { status: "unprocessable_entity" }

# Group Speedtests

Speedtests belong to boxes and are a nested resource. You can only create and list speedtests per device. Creating a speedtest **DOES NOT** store it permanently. Only speedtests which run automatically in the middle of the night are stored.

The creation of a speedtest is meant to be an ephemeral and quick connection check. The results from the creation of a speedtest can be seen in the Box object. Use the Boxes API to get this information.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `GET` - Retrieves a list of speedtests

## Speedtests Collection [/api/v1/boxes/{box_id}/speedtests]

+ Parameters

    + box_id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Slug `slug` of the Box to perform action with. Has example value.

### List all Speedtests [GET]

+ Request (application/json)

            { "box_id": "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 200 (application/json)


    + Body

            [{
                "download_speed": "1680.0",
                "created_at": "September 30 2014 00:59:57",
                "box_id": 2217
            },
            {
                "download_speed": "2236.0",
                "created_at": "September 29 2014 00:59:57",
                "box_id": 2217
            },
            {
                "download_speed": "783732.0",
                "created_at": "September 28 2014 00:59:57",
                "box_id": 2217
            },
            {
                "download_speed": "1190397.0",
                "created_at": "September 27 2014 00:59:57",
                "box_id": 2217
            },
            {
                "download_speed": "1067134.0",
                "created_at": "September 26 2014 00:59:58",
                "box_id": 2217
            },
            {
                "download_speed": "987708.0",
                "created_at": "September 25 2014 00:59:58",
                "box_id": 2217
            },
            {
                "download_speed": "819041.0",
                "created_at": "September 24 2014 00:59:58",
                "box_id": 2217
            },
            {
                "download_speed": "0.0",
                "created_at": "September 23 2014 00:59:58",
                "box_id": 2217
            },
            {
                "download_speed": "0.0",
                "created_at": "September 22 2014 00:59:58",
                "box_id": 2217
            },
            {
                "download_speed": "0.0",
                "created_at": "September 21 2014 00:59:58",
                "box_id": 2217
            }]


### Create a Speedtest [POST]

You can't run two speedtests at the same time. You will receieve a 422 response if you try before the speedtest has completed.

Speedtests are queued - should a job fail, we'll pause for 120 seconds before allowing another one to run.

Remember, creating a speedtest only creates a temporary result. Permanent results are collected at the same time daily.

+ Parameters

    + box_id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Slug `slug` of the Box to perform action with. Has example value.

+ Request (application/json)

            { "box_id": "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 200 (application/json)

            { "message": "Speedtest queued for processing." }

# Group Sessions

Sessions API provides information on the individual logins per location, box, etc.

Supports:

- `GET` - Retrieves a resource or list of resources

You may query the data and we have some marginally non-restful resources which offer some filtered and aggregated data. More later.

Can be called on the root resource alone /api/v1/sessions or within a location or box:

- /api/v1/sessions
- /api/v1/locations/{id}/sessions
- /api/v1/boxes/{id}/sessions

All sessions queries are cached for ten minutes from the initial request unless a search parameter is passed.

**Please note, we do not provide the mac address of the end-user's device. Intead you can find a unique_id which is a hashed digest of the mac.**

## Sessions Collection [/api/v1/sessions{?q,location_id,box_id,page,size}]

Limited to 1,000 records per query. Pagination is available.

Alongside the standard fields, you will see some fields for pagination:

- _current_page
- _next_page
- _total_pages

#### Fields to filter include:

- username

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources

### List all sessions [GET]

+ Parameters

    + box_id (optional, integer, `153`) ... The numeric ID of the box you want to filter results for.
    + location_id (optional, integer, `872`) ... The numeric ID of the location you want to filter results for.
    + page (optional, integer, `1`) ... For pagination purposes. 
    + size (optional, integer, `500`) ... The number of records you want to return. Max. value is 1000.
    + q (optional, string, `search query`) ... Search through the results as you query the API.

+ Response 200 (application/json)

    + Body
        
            {
                "sessions": [
                    {
                        "id": 4297722,
                        "unique_id": "97bcdd704e5177d6f463c695c2e88ee2",
                        "acctsessionid": "603482350068250588",
                        "acctuniqueid": "12465ea6b5e6594e",
                        "username": "7537d8d5-c6dc-44bf-aee8-4a1bbc11521e",
                        "groupname": "",
                        "realm": "",
                        "ap_ipaddr": "10.241.87.150",
                        "device_ipaddr": "46.165.249.9",
                        "ap_mac": "00-18-0A-04-4B-1C",
                        "starttime": "2014-08-14T22:17:20.000+01:00",
                        "stoptime": "2014-08-14T22:52:17.000+01:00",
                        "sessiontime": 2086,
                        "stopcause": "Idle-Timeout",
                        "download": 593920,
                        "upload": 3482624,
                        "hour": 22,
                        "date": "2014-08-14",
                        "manufacturer": "Motorola Mobility LLC",
                        "location_id": 870,
                        "lat": 0.142222,
                        "lng": 71.8878
                    },
                    {
                        "id": 4297579,
                        "unique_id": "2346f71f291b41c5d9d8824bd22f5cee",
                        "acctsessionid": "603482350068250406",
                        "acctuniqueid": "fb8e7856e06cd28c",
                        "username": "70a813bb-161d-4023-a416-3fbbf7c39b65",
                        "groupname": "",
                        "realm": "",
                        "ap_ipaddr": "10.230.190.83",
                        "device_ipaddr": "46.165.249.9",
                        "ap_mac": "00-18-0A-04-5D-42",
                        "starttime": "2014-08-14T21:15:55.000+01:00",
                        "stoptime": "2014-08-14T21:47:17.000+01:00",
                        "sessiontime": 1861,
                        "stopcause": "Idle-Timeout",
                        "download": 112640,
                        "upload": 1657856,
                        "hour": 21,
                        "date": "2014-08-14",
                        "manufacturer": "Samsung Electronics Co.,Ltd",
                        "location_id": 870,
                        "lat": 0.142222,
                        "lng": 71.8878
                    },
                    {
                        "id": 4297505,
                        "unique_id": "878f4db6727337ff24512212facc7385",
                        "acctsessionid": "603482350068250265",
                        "acctuniqueid": "58d016913c6f89f3",
                        "username": "befbfd4e-2b76-40c1-a685-fe449a1d27a8",
                        "groupname": "",
                        "realm": "",
                        "ap_ipaddr": "10.241.202.251",
                        "device_ipaddr": "46.165.249.9",
                        "ap_mac": "00-18-0A-04-5D-42",
                        "starttime": "2014-08-14T20:39:19.000+01:00",
                        "stoptime": "2014-08-14T21:29:18.000+01:00",
                        "sessiontime": 3001,
                        "stopcause": "Idle-Timeout",
                        "download": 1801216,
                        "upload": 14817280,
                        "hour": 20,
                        "date": "2014-08-14",
                        "manufacturer": "Sony Mobile Communications AB",
                        "location_id": 870,
                        "lat": 0.142222,
                        "lng": 71.8878
                    },
                    {
                        "id": 4296323,
                        "unique_id": "c5f591088de5e75498d5e35d7aecc800",
                        "acctsessionid": "53ecdbc700000005",
                        "acctuniqueid": "bad3d725acd9faed",
                        "username": "74a7e839-d2a2-468c-aa1d-dc662771fb67",
                        "groupname": "",
                        "realm": "",
                        "ap_ipaddr": "192.168.4.85",
                        "device_ipaddr": "192.168.4.1",
                        "ap_mac": "DC-9F-DB-33-5B-4B",
                        "starttime": "2014-08-14T18:39:42.000+01:00",
                        "stoptime": "2014-08-14T18:59:52.000+01:00",
                        "sessiontime": 1210,
                        "stopcause": "0",
                        "download": 1066281,
                        "upload": 321456,
                        "hour": 18,
                        "date": "2014-08-14",
                        "manufacturer": "Samsung Electronics Co.,Ltd",
                        "location_id": 154,
                        "lat": 0.142222,
                        "lng": 71.8878
                    },
                    {
                        "id": 4293749,
                        "unique_id": "253adc21c5d63e07ed0102af45678a8b",
                        "acctsessionid": "603482350068249182",
                        "acctuniqueid": "b57077dcbc7531da",
                        "username": "26b1d67f-293a-429e-95e4-5522927e0357",
                        "groupname": "",
                        "realm": "",
                        "ap_ipaddr": "10.62.220.2",
                        "device_ipaddr": "46.165.249.9",
                        "ap_mac": "00-18-0A-04-4B-1C",
                        "starttime": "2014-08-14T16:01:13.000+01:00",
                        "stoptime": "2014-08-14T16:48:47.000+01:00",
                        "sessiontime": 2846,
                        "stopcause": "Idle-Timeout",
                        "download": 393216,
                        "upload": 6594560,
                        "hour": 16,
                        "date": "2014-08-14",
                        "manufacturer": "Apple",
                        "location_id": 870,
                        "lat": 0.142222,
                        "lng": 71.8878
                    },
                ],
                "_links": {
                    "current_page": 1,
                    "total_pages": 18521,
                    "next_page": 2,
                    "total_entries": 463003
                }
            }

## Sessions Timeline [/api/v1/sessions{?timeline,start,end}]

Returns the aggregated sessions per day for the specified range.

### Sessions timeline aggregate [GET]

+ Parameters

    + timeline (required, boolean, `true`) ... Using timeline = true to provide timeline aggregates.
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to 12 weeks ago.


+ Response 200 (application/json)

    + Body
    
            {        
                "timeline": [
                    {
                        "time": 1406332800000,
                        "count": 12210
                    },
                    {
                        "time": 1406419200000,
                        "count": 9445
                    },
                    {
                        "time": 1406505600000,
                        "count": 14473
                    },
                    {
                        "time": 1406592000000,
                        "count": 17580
                    },
                    {
                        "time": 1406678400000,
                        "count": 19443
                    },
                    {
                        "time": 1406764800000,
                        "count": 31008
                    },
                    {
                        "time": 1406851200000,
                        "count": 38870
                    },
                    {
                        "time": 1406937600000,
                        "count": 10262
                    },
                    {
                        "time": 1407024000000,
                        "count": 7399
                    },
                    {
                        "time": 1407110400000,
                        "count": 10590
                    },
                    {
                        "time": 1407974400000,
                        "count": 25678
                    }
                ]
            }
            
## Uniques Timeline [/api/v1/{?uniques_timeline,interval,start,end}]

Returns aggregated data for the unique users by mac address (not provided) on a daily basis.

### Uniques timeline [GET]

+ Parameters

    + uniques_timeline (required, boolean, `true`) ... Using uniques_timeline = true to provide a unique users per day, week, month.
    + interval (optional, string, `week`) ... Set the interval for the query. Options include day, week or month. Leave blank and results are grouped daily.
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to now.

+ Response 200 (application/json)

    + Body
            
            {
                "uniques_timeline": [
                    {
                        "time": 1406329200000,
                        "count": 1680
                    },
                    {
                        "time": 1406415600000,
                        "count": 1376
                    },
                    {
                        "time": 1406502000000,
                        "count": 2042
                    },
                    {
                        "time": 1406588400000,
                        "count": 2257
                    },
                    {
                        "time": 1406674800000,
                        "count": 2170
                    },
                    {
                        "time": 1406761200000,
                        "count": 2225
                    },
                    {
                        "time": 1406847600000,
                        "count": 2235
                    },
                    {
                        "time": 1406934000000,
                        "count": 1613
                    },
                    {
                        "time": 1408057200000,
                        "count": 29
                    }
                ]
            }

## Who's Online [/api/v1/sessions{?online,page,size}]

Returns a list of users currently connected and logged in. This table is cleared every five minutes. During this time, you may see a non-blank stoptime. This will mean the user has disconnected and will be accompanied by a stopreason.

A _links object is also available with the pagination details.

### List online [GET]

+ Parameters

    + online (required, boolean, `true`) ... Using online = true to provide a list of online users.
    + page (optional, integer, `1`) ... For pagination purposes. 
    + size (optional, integer, `500`) ... The number of records you want to return. Max. value is 1000.

+ Response 200 (application/json)

    + Body

            {
                "online": [
                    {
                        "ap_mac": "00:11:22:33:44:55",
                        "unique_id": "e8840311f8054efb51edae464bff66e2",
                        "starttime": "2014-08-14T11:31:46.000+01:00",
                        "stoptime": null,
                        "stopreason": null,
                        "location_id": 11,
                        "download": 981273987,
                        "upload": 1231232
                    },
                    {
                        "ap_mac": "00:11:22:33:44:55",
                        "unique_id": "a06f0133050966f39e52ef50410ab487",
                        "starttime": "2014-08-14T11:14:28.000+01:00",
                        "stoptime": null,
                        "stopreason": null,
                        "location_id": 0,
                        "download": 9919191,
                        "upload": 817266
                    },
                    {
                        "ap_mac": "00:11:22:33:44:55",
                        "unique_id": "e8840311f8054efb51edae464bff66e2",
                        "starttime": "2014-08-14T11:31:41.000+01:00",
                        "stoptime": null,
                        "stopreason": null,
                        "location_id": 28,
                        "download": 82398723,
                        "upload": 283749
                    },
                    {
                        "ap_mac": "00:11:22:33:44:55",
                        "unique_id": "bb10c2c4d6ff9ccec57481e8a8ac3c33",
                        "starttime": "2014-08-15T00:23:16.000+01:00",
                        "stoptime": null,
                        "stopreason": "Idle-Timeout",
                        "location_id": 99,
                        "download": 34534534,
                        "upload": 89739487
                    }
                ],
                "_links": {
                    "current_page": 1,
                    "total_pages": 2,
                    "next_page": 2,
                    "total_entries": 42
                }
            }

## Client aggregates [/api/v1/sessions{?clients,page,size}]

An aggregated list of clients with session data grouped by their unique id.

If the client is currently online, the online parameter will be set to true.

A _links object is also available with the pagination details.

### List clients [GET]

+ Parameters

    + clients (required, boolean, `true`) ... Using clients = true to provide a list of clients.
    + page (optional, integer, `1`) ... For pagination purposes. 
    + size (optional, integer, `500`) ... The number of records you want to return. Max. value is 1000.

+ Response 200 (application/json)

    + Body

            {
                "clients": [
                    {
                        "unique_id": "324f726a19920f9c50e1603ce5be7a1d",
                        "username": "2f969274b6d034c6cb03f2e62359f971643d3d51",
                        "last_seen": "2014-07-26T11:29:06.000+01:00",
                        "count": 1,
                        "manufacturer": "Apple",
                        "downloads": 231074,
                        "online": false
                    },
                    {
                        "unique_id": "a7eb678617ddf92744c8a3d317e4ff98",
                        "username": "784ffefc-74c4-44b0-b769-7b0e1fd1e5c7",
                        "last_seen": "2014-07-26T11:22:36.000+01:00",
                        "count": 2,
                        "manufacturer": "Murata Manufactuaring Co.,Ltd.",
                        "downloads": 0,
                        "online": false
                    },
                    {
                        "unique_id": "9907d8ed918ff118a06dfa0fd23ca7e5",
                        "username": "4db35152-f2b9-4930-a010-1559a418993a",
                        "last_seen": "2014-07-26T10:35:34.000+01:00",
                        "count": 23,
                        "manufacturer": "Apple",
                        "downloads": 5907801,
                        "online": false
                    }
                ],
                "_links": {
                    "current_page": 1,
                    "total_pages": 1,
                    "next_page": null,
                    "total_entries": 10
                }
            }


## Unique clients [/api/v1/sessions{?uniques,start,end,interval}]

Returns the aggregated unique clients for the specified range.

### Unique clients aggregate [GET]

+ Parameters

    + uniques (required, boolean, `true`) ... Using uniques = true to provide unique client aggregates.
    + interval (optional, string, `week`) ... Set the interval for the query. Options include day, week or month. Leave blank and results are grouped daily.
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to today.


+ Response 200 (application/json)

    + Body

            {
                "uniques": {
                    "_type": "terms",
                    "missing": 0,
                    "total": 483442,
                    "other": 465273,
                    "terms": [
                        {
                            "term": "5d1614670b13a11762f97b9f0d0ec247",
                            "count": 2192
                        },
                        {
                            "term": "e64995d427e856aedf54c6098250d085",
                            "count": 2126
                        },
                        {
                            "term": "68e6b8941e05cefbca7b09b24e0f3d48",
                            "count": 2087
                        },
                        {
                            "term": "7f90d57fe9b94f2a3b16af582bedbad8",
                            "count": 2001
                        },
                        {
                            "term": "bf1bf04c73a3337ac9c3088df62e415e",
                            "count": 1977
                        },
                        {
                            "term": "f89928645900cbd226d0db5d3a198399",
                            "count": 1777
                        },
                        {
                            "term": "63fcc15ce2536ac4cc75b370e8b7903c",
                            "count": 1739
                        },
                        {
                            "term": "b95f55a51a4434db2426cacdf713541b",
                            "count": 1665
                        },
                        {
                            "term": "7a22cb356c155319150ceabf2b88a603",
                            "count": 1660
                        },
                        {
                            "term": "1e9bd1869e99b33f7e7860c58630f353",
                            "count": 945
                        }
                    ]
                }
            }
        

## Top Boxes [/api/v1/sessions{?boxes,start,end}]

Returns the aggregated sessions per box in your network.

### Top boxes aggregates [GET]

+ Parameters

    + boxes (required, boolean, `true`) ... Using boxes = true to provide unique box session aggregates.
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to 12 weeks ago.


+ Response 200 (application/json)

    + Body

            {
                "boxes": {
                    "_type": "terms",
                    "missing": 0,
                    "total": 483442,
                    "other": 389931,
                    "terms": [
                        {
                            "term": "00-27-22-54-DE-79",
                            "count": 16506
                        },
                        {
                            "term": "00-27-22-50-33-26",
                            "count": 15324
                        },
                        {
                            "term": "00-27-22-54-FF-D4",
                            "count": 11345
                        },
                        {
                            "term": "DC-9F-DB-B0-A1-36",
                            "count": 8604
                        },
                        {
                            "term": "00-25-22-2F-AF-65",
                            "count": 8265
                        },
                        {
                            "term": "DC-9F-DB-2A-33-D4",
                            "count": 7933
                        },
                        {
                            "term": "24-A4-3C-D2-41-6C",
                            "count": 6995
                        },
                        {
                            "term": "24-A4-3C-0E-00-DE",
                            "count": 6876
                        },
                        {
                            "term": "24-A4-3C-98-00-D6",
                            "count": 6609
                        },
                        {
                            "term": "00-27-22-50-12-2F",
                            "count": 5054
                        }
                    ]
                }
            }      
          
## Top Locations [/api/v1/sessions{?locations,start,end}]

Returns the aggregated sessions per location in your network.

The results will include a term field which is the ID of the location.

### Top locations aggregates [GET]

+ Parameters

    + locations (required, boolean, `true`) ... Using locations = true to provide location aggregates by session.
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to 12 weeks ago.


+ Response 200 (application/json)

    + Body
             
             {
                "locations": [
                    {
                        "term": "46",
                        "count": 54427
                    },
                    {
                        "term": "1099",
                        "count": 28056
                    },
                    {
                        "term": "1170",
                        "count": 22318
                    },
                    {
                        "term": "800",
                        "count": 16718
                    },
                    {
                        "term": "1196",
                        "count": 8604
                    },
                    {
                        "term": "1853",
                        "count": 8491
                    },
                    {
                        "term": "24",
                        "count": 8300
                    },
                    {
                        "term": "471",
                        "count": 7933
                    },
                    {
                        "term": "1809",
                        "count": 6995
                    },
                    {
                        "term": "1870",
                        "count": 5312
                    }
                ]
            }
            
            
## Session stats [/api/v1/sessions{?stats,start,end}]

Returns statistical information on your sessions. Includes:

- Number of sessions
- Total minutes online
- Min, max and mean values
- Standard deviation and variance

### Session statistics [GET]

+ Parameters

    + stats (required, boolean, `true`) ... Using stats = true to provide session statistics.
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to 12 weeks ago.


+ Response 200 (application/json)

    + Body

            {
                "stats": {
                    "_type": "statistical",
                    "count": 483442,
                    "total": 2033487829,
                    "min": 0,
                    "max": 488313,
                    "mean": 4206.270512284825,
                    "sum_of_squares": 78037412978587,
                    "variance": 143727713.1204451,
                    "std_deviation": 11988.649345128295
                }
            }
            
## Session data stats [/api/v1/sessions{?data,start,end}]

Returns statistical information on your sessions. Includes:

- Number of sessions
- Total data download and uploaded
- Min, max and mean values for data transfer
- Standard deviation and variance

### Session data statistics [GET]

+ Parameters

    + data (required, boolean, `true`) ... Using data = true to provide session data usage statistics.
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to 12 weeks ago.


+ Response 200 (application/json)

    + Body

            {
                "data": {
                    "downloads": {
                        "_type": "statistical",
                        "count": 483442,
                        "total": 30615204960418,
                        "min": 0,
                        "max": 11766394118,
                        "mean": 63327565.58267176,
                        "sum_of_squares": 4.221603241186846e+22,
                        "variance": 83313501954548110,
                        "std_deviation": 288640783.5953681
                    },
                    "uploads": {
                        "_type": "statistical",
                        "count": 483442,
                        "total": 5204021009171,
                        "min": 0,
                        "max": 5613961670,
                        "mean": 10764519.857958142,
                        "sum_of_squares": 5.023311701172294e+21,
                        "variance": 10274847683233648,
                        "std_deviation": 101364923.33758087
                    }
                }
            }
            
    
## Top Manufacturers [/api/v1/sessions{?manufacturers,start,end}]

Returns the aggregated manufacturers in your network.

### Top boxes aggregates [GET]

+ Parameters

    + manufacturers (required, boolean, `true`) ... Using manufacturers = true to provide manufacturer aggregates.
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to 12 weeks ago.


+ Response 200 (application/json)

    + Body

            {
                "manufacturers": [
                    {
                        "term": "Apple",
                        "count": 1555378
                    },
                    {
                        "term": "Intel Corporate",
                        "count": 137411
                    },
                    {
                        "term": "Samsung Electronics Co.,Ltd",
                        "count": 125167
                    },
                    {
                        "term": "Hon Hai Precision Ind. Co.,Ltd.",
                        "count": 106136
                    },
                    {
                        "term": "HTC Corporation",
                        "count": 78125
                    },
                    {
                        "term": "Murata Manufactuaring Co.,Ltd.",
                        "count": 74703
                    },
                    {
                        "term": "Liteon Technology Corporation",
                        "count": 74142
                    },
                    {
                        "term": "Apple, Inc",
                        "count": 63293
                    },
                    {
                        "term": "Sony Mobile Communications AB",
                        "count": 51227
                    },
                    {
                        "term": "Apple, Inc.",
                        "count": 46957
                    }
                ]
            }

# Group State Events

These represent the state changes of the boxes. You generally see these occuring each minute although you will see a record of the device being rebooted, installing etc.

Please note, these are not the actuall device heartbeats.

State events are an ephemeral overview of what the box is doing.

They are a nested resource in the Boxes API.

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources

## State Events Collection [/api/v1/boxes/{box_id}/state_events]

### List State Changes [GET]

+ Parameters

    + box_id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Slug `slug` of the Box to perform action with. Has example value.

+ Response 200 (application/json)

    + Body
    
         
            [{
                "timestamp": 1412122931,
                "state": "rebooting"
            },
            {
                "timestamp": 1411696416,
                "state": "rebooting"
            },
            {
                "timestamp": 1411692346,
                "state": "rebooting"
            },
            {
                "timestamp": 1411691945,
                "state": "rebooting"
            },
            {
                "timestamp": 1411691880,
                "state": "rebooting"
            },
            {
                "timestamp": 1411691864,
                "state": "rebooting"
            },
            {
                "timestamp": 1411691783,
                "state": "rebooting"
            },
            {
                "timestamp": 1411691765,
                "state": "rebooting"
            },
            {
                "timestamp": 1411691722,
                "state": "rebooting"
            },
            {
                "timestamp": 1411685736,
                "state": "rebooting"
            },
            {
                "timestamp": 1411685633,
                "state": "online"
            },
            {
                "timestamp": 1411684031,
                "state": "online"
            }]


# Group Technologies

Represents the technologies API. An overview of the technologies in use across your network. Data derives currently from the login screens only.

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources

## Technologies Collection [/api/v1/technologies{?q,start,end,page,size}]

A list of all the technologies in use on your networks. You may search by passing q=search_string. Results will be filtered accordingly.

Results are cached for ten minutes to improve load times.

### List technologies [GET]

+ Parameters

    + q (optional, string, `Search data`) ... Search through your list of tech..
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to now.
    + page (optional, integer, `1`) ... For pagination purposes. 
    + size (optional, integer, `500`) ... The number of records you want to return. Max. value is 1000.
    
+ Response 200 (application/json)
    
    + Body
    
            {
                "tech": [
                    {
                        "unique_id": null,
                        "request_uri": "polkaspots.my-wifi.co",
                        "request_ip": "10.227.57.10",
                        "request_os": "Mozilla/5.0 (iPhone; CPU iPhone OS 7_1 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D167 Safari/9537.53",
                        "location_id": 870,
                        "created_at": "2014-05-09T13:06:09.000+01:00",
                        "platform": "iPhone",
                        "mobile": true,
                        "browser": "Safari",
                        "version": null,
                        "request_lat": 52.9235,
                        "request_lon": -1.47423,
                        "request_user": null
                    },
                    {
                        "unique_id": null,
                        "request_uri": "polkaspots.my-wifi.co",
                        "request_ip": "10.227.118.231",
                        "request_os": "Mozilla/5.0 (Linux; Android 4.4.2; C6903 Build/14.3.A.0.757) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Mobile Safari/537.36",
                        "location_id": 870,
                        "created_at": "2014-05-09T12:52:03.000+01:00",
                        "platform": "Linux",
                        "mobile": true,
                        "browser": "Chrome",
                        "version": null,
                        "request_lat": 52.9235,
                        "request_lon": -1.47423,
                        "request_user": null
                    },
                    {
                        "unique_id": null,
                        "request_uri": "polkaspots.my-wifi.co",
                        "request_ip": "10.249.46.168",
                        "request_os": "Mozilla/5.0 (iPhone; CPU iPhone OS 7_0_4 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11B554a Safari/9537.53",
                        "location_id": 870,
                        "created_at": "2014-05-09T11:50:01.000+01:00",
                        "platform": "iPhone",
                        "mobile": true,
                        "browser": "Safari",
                        "version": null,
                        "request_lat": 52.9235,
                        "request_lon": -1.47423,
                        "request_user": null
                    },
                    {
                        "unique_id": null,
                        "request_uri": "polkaspots.my-wifi.co",
                        "request_ip": "10.65.17.122",
                        "request_os": "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 620)",
                        "location_id": 870,
                        "created_at": "2014-05-09T11:23:44.000+01:00",
                        "platform": "Windows",
                        "mobile": true,
                        "browser": "Internet Explorer",
                        "version": null,
                        "request_lat": 52.9235,
                        "request_lon": -1.47423,
                        "request_user": null
                    }
                ],
                "_links": {
                    "current_page": 1,
                    "total_pages": 71,
                    "next_page": 2,
                    "total_entries": 1763
                }
            }

## Aggregations [/api/v1/technologies{?aggs,q,start,end}]

Get grouped / aggregated stats about the technologies in use in your networks.

### Technologies aggregrates [GET]

+ Parameters

    + aggs (required, boolean, `true`) ... Set this parameter to request aggregated tech. stats.
    + q (optional, string, `Search data`) ... Search through your list of tech..
    + start (optional, integer, `1406329200`) ... Start date for the query in Epoch / Unix format. Defaults to 12 weeks ago.
    + end (optional, integer, `1406329200`) ... End date for the query in Epoch / Unix format. Defaults to now.

+ Response 200 (application/json)
    
    + Body

            {
                "stats": {
                    "request_uri": {
                        "_type": "terms",
                        "missing": 0,
                        "total": 1763,
                        "other": 0,
                        "terms": [
                            {
                                "term": "polkaspots.my-wifi.co",
                                "count": 1538
                            },
                            {
                                "term": "polkaspots.wirelessisp.co",
                                "count": 225
                            }
                        ]
                    },
                    "request_ip": {
                        "_type": "terms",
                        "missing": 0,
                        "total": 1763,
                        "other": 583,
                        "terms": [
                            {
                                "term": "10.32.132.2",
                                "count": 160
                            },
                            {
                                "term": "10.17.133.179",
                                "count": 135
                            },
                            {
                                "term": "10.34.86.222",
                                "count": 130
                            },
                            {
                                "term": "10.5.17.12",
                                "count": 128
                            },
                            {
                                "term": "10.204.0.113",
                                "count": 127
                            },
                            {
                                "term": "10.32.40.97",
                                "count": 114
                            },
                            {
                                "term": "10.23.30.165",
                                "count": 112
                            },
                            {
                                "term": "26.27.49.254",
                                "count": 101
                            },
                            {
                                "term": "78.32.25.243",
                                "count": 87
                            },
                            {
                                "term": "10.32.42.110",
                                "count": 86
                            }
                        ]
                    },
                    "request_os": {
                        "_type": "terms",
                        "missing": 0,
                        "total": 29344,
                        "other": 15620,
                        "terms": [
                            {
                                "term": "mozilla",
                                "count": 1570
                            },
                            {
                                "term": "5.0",
                                "count": 1570
                            },
                            {
                                "term": "gecko",
                                "count": 1507
                            },
                            {
                                "term": "like",
                                "count": 1487
                            },
                            {
                                "term": "khtml",
                                "count": 1474
                            },
                            {
                                "term": "applewebkit",
                                "count": 1474
                            },
                            {
                                "term": "safari",
                                "count": 1451
                            },
                            {
                                "term": "mobile",
                                "count": 1312
                            },
                            {
                                "term": "version",
                                "count": 1112
                            },
                            {
                                "term": "os",
                                "count": 767
                            }
                        ]
                    },
                    "platform": {
                        "_type": "terms",
                        "missing": 240,
                        "total": 1523,
                        "other": 0,
                        "terms": [
                            {
                                "term": "iphone",
                                "count": 753
                            },
                            {
                                "term": "linux",
                                "count": 446
                            },
                            {
                                "term": "windows",
                                "count": 104
                            },
                            {
                                "term": "macintosh",
                                "count": 83
                            },
                            {
                                "term": "ipad",
                                "count": 62
                            },
                            {
                                "term": "blackberry",
                                "count": 58
                            },
                            {
                                "term": "x11",
                                "count": 12
                            },
                            {
                                "term": "android",
                                "count": 4
                            },
                            {
                                "term": "ipod",
                                "count": 1
                            }
                        ]
                    },
                    "browser": {
                        "_type": "terms",
                        "missing": 206,
                        "total": 1557,
                        "other": 5,
                        "terms": [
                            {
                                "term": "Safari",
                                "count": 829
                            },
                            {
                                "term": "Chrome",
                                "count": 337
                            },
                            {
                                "term": "Android",
                                "count": 205
                            },
                            {
                                "term": "Internet Explorer",
                                "count": 76
                            },
                            {
                                "term": "BlackBerry",
                                "count": 58
                            },
                            {
                                "term": "Firefox",
                                "count": 18
                            },
                            {
                                "term": "Microsoft",
                                "count": 13
                            },
                            {
                                "term": "uTorrent",
                                "count": 11
                            },
                            {
                                "term": "ocspd",
                                "count": 3
                            },
                            {
                                "term": "NAV",
                                "count": 2
                            }
                        ]
                    }
                }
            }

# Group Versions

You can access the change history for both your Boxes and Locations using the Versions API. Versioning allows you to rollback where you've made mistakes and also check who's updated a setting. You'll see the username of the person Whodunnit.

This is destructive and can cause problems.

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources
- `POST` - Restore a version

## Versions Collection [/api/v1/boxes/{box_id}/versions]

(Also available on /locations/{location_id})

+ Parameters

    + box_id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Slug `slug` of the Box to perform action on.

### List all Versions for a Box [GET]

+ Request (application/json)

            { "box_id": "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 200 (application/json)

    +    body 
        
            
            [{
                "id": 67808,
                "event": "update",
                "whodunnit": "bob-marley",
                "changeset": {
                    "is_monitored": [
                        false,
                        true
                    ],
                    "slug": [
                        "JCyK7Zwh0ON_ZOWso8Mhuw",
                        null
                    ]
                },
                "created_at": "September 30 2014 23:39:34"
            },
            {
                "id": 67747,
                "event": "update",
                "whodunnit": "bob-marley",
                "changeset": {
                    "wan_proto": [
                        "static",
                        "dhcp"
                    ]
                },
                "created_at": "September 29 2014 16:55:05"
            },
            {
                "id": 67744,
                "event": "update",
                "whodunnit": "bob-marley",
                "changeset": {
                    "wan_proto": [
                        "pppoe",
                        "static"
                    ],
                    "wan_ipaddr": [
                        "",
                        "192.168.1.1"
                    ],
                    "wan_gateway": [
                        "",
                        "192.168.1.1"
                    ]
                },
                "created_at": "September 29 2014 16:23:53"
            },
            {
                "id": 64266,
                "event": "update",
                "whodunnit": null,
                "changeset": {
                    "address": [
                        null,
                        "62 Britton Street, EC1M 5UY, United Kingdom"
                    ],
                    "description": [
                        null,
                        "A new box"
                    ]
                },
                "created_at": "March 29 2014 10:55:48"
            }]
        
 
## Revert [/api/v1/boxes/{box_id}/versions/{id}]

(Also available on /locations/{location_id})

+ Parameters

    + box_id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Slug `slug` of the Box to perform action on.
    + id (required, integer, `123`) ... ID of the version you want to rollback to.

### Revert / Rollback to a Version [GET]

Occasionally you will get a 422 error when rolling back to a previous version. This is usually caused by the introduction of a validation on the model, in this case the Box. 

For example, if you rollback to an old version is a NULL WAN_MTU, you will receive an error as a validation for a blank WAN_MTU has been introduced.

If you experience this, you must rollback to a later version or manually apply the changes.

+ Request (application/json)

            { "box_id": "JCyK7Zwh0ON_ZOWso8Mhuw", "id": 123 }

+ Response 200 (application/json)

    +    body 
            
            { "response": "Succesfully rolledback to version 123" }
            
+ Response 422 (application/json)

    +    body 
            
            { "response": "There was an error rolling back to version 123" }
            
            
        
# Group Walled Gardens

Walled Gardens related resources of the **Walled Gardens API**. Walled gardens are a nested in a location. You cannot currently list all your walled gardens without specifying a location id (slug).

Adding a walled garden to a location will allow unlimited access to the url specified. Users will not have to login to browse these sites.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Walled Gardens Collection [/api/v1/locations/{location_id}/walledgardens]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Walled Gardens [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
    
            [{
                
                {
                    "id": 75,
                    "location_id": 870,
                    "url": "polkaspots.com",
                    "created_at": "2014-09-16T23:50:42.000+01:00",
                    "updated_at": "2014-09-16T23:50:42.000+01:00"
                },
                {
                    "id": 76,
                    "location_id": 870,
                    "url": "google.com",
                    "created_at": "2014-09-16T23:50:47.000+01:00",
                    "updated_at": "2014-09-16T23:50:47.000+01:00"
                },
                {
                    "id": 77,
                    "location_id": 870,
                    "url": "peaceandharmony.com",
                    "created_at": "2014-09-16T23:51:03.000+01:00",
                    "updated_at": "2014-09-16T23:51:03.000+01:00"
                }
                
            }]

## Walled Garden Create [/api/v1/locations/{location_id}/walledgardens{?url}]

### Create a Walled Garden [POST]

There's two ways to create a walled garden. You can either post directly with a location id or you update the resource when updating a location. Please see the section within the location's group for more information. 

**CAUSES SYNC**

Please note, creating a new walled garden will force all your boxes to reload their networks. This *will* log users off.

*TODO: Implement the batch create process.*

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + url (required, string, `polkaspots.com`) ... URL `url` of the Location to whitelist. Please don't include the protocol (http or https).

+ Request (application/json)

        { "url": "polkaspots.com" }

+ Response 200 (application/json)

        {
            "id": 7,
            "location_id": 1636,
            "url": "polkaspots.com",
            "created_at": "2014-09-17T00:15:57.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }


## Walled Garden Update [/api/v1/locations/{location_id}/walledgardens/{id}?walledgarden={?url}]

### Update a Walled Garden [PATCH]

You can also update a walled garden url by using the location's update method.

**CAUSES SYNC**

Please note, creating a new walled garden will force all your boxes to reload their networks. This *will* log users off.


+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the walled garden you wish to update.
    + url (required, string, `polkaspots.com`) ... URL `url` of the Location to whitelist. Please don't include the protocol (http or https).

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
            "walledgarden: {
                "url": "google.com"
            }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "location_id": 1636,
            "url": "google.com",
            "created_at": "2014-09-17T00:15:57.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

## Walled Garden Delete [/api/v1/locations/{location_id}/walledgardens/{id}]

### Delete a Walled Garden [DELETE]

**CAUSES SYNC**

Please note, creating a new walled garden will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the walled garden you wish to update.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)
