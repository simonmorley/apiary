FORMAT: 1A
HOST: https://api.polkaspots.com

# PolkaSpots API Documentation for Cucumber Tony.

##I'm doing it with Tony, are you?##

Cucumber Tony's API provides a way to control your Wireless hotspots programatically.

Our API is based on REST principles, all you need to use it is your Cucumber Tony account. You must be authenticated and call HTTPs requests on the URLs listed below. 

Please create an application in Cucumber Tony and use your access token in all requests. More documentation will follow.

>**Note:** Some resources trigger updates to your boxes. Sending invalid data can cause your boxes to crash.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

##Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 instead).
- 201 `Created` - The request was successful and a resource was created.
- 204 `No Content` - The request was successful but there is no representation to return (that is, the response is empty).
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 403 `Forbidden` - Access denied. Naughty pants.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 422 `Bad Request` - The request could not be understood or was missing required parameters.
- 429 `Too Many Requests` - Exceeded our API limits of 60 per minute. 
- 503 `Service Unavailable` - The service is temporary unavailable. Try again later.

# Group Accounts

Accounts related resources of the **Accounts API**

## Accounts Collection [/api/v1/accounts]

## Generate Password [/accounts/generate_password]

Create a unique password for your captive portal. This doesn't save anything, it's just a nice little end-point to use.

### Generate a one time password [POST]

+ Request (application/json)

            Accept: application/json

+ Response 200 (application/json)

    + Body

            {"password": "random-passy"}

# Group Blacklists

Related resources of the **Blacklists API**. Blacklists belong to a location. You cannot currently list all your blacklists without specifying a location id (slug).

You can either create, read, update and destroy your blacklists via the blacklists API or you may update with a location.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Blacklists Collection [/api/v1/locations/{location_id}/blacklists]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Blacklists [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
    
            [{
                "id": 57,
                "mac": "11-22-33-44-55-66",
                "expires_at": null,
                "created_at": "September 17 2014 13:49:43"
            },
            {
                "id": 58,
                "mac": "22-33-22-11-33-44",
                "expires_at": "September 20 2014 00:00:00",
                "created_at": "September 17 2014 13:49:43"
            }]
    
## Blacklists Create [/api/v1/locations/{location_id}/blacklists{?blacklisted,mac}]

### Create a Blacklisted device [POST]

There's two ways to create a blacklisted device, either using this API or the location's API as a nested resource.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + blacklisted (required, params, `mac and optional expired_at`) ... Mac address of the device to block and an optional expires_at date.

+ Request (application/json)

        {
            "blacklisted": 
                {
                    "mac": "00:22:22:11:22:33",
                    "expires_at": "September 20 2015 00:00:00"
                }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "mac": "00:22:22:11:22:33",
            "expires_at": "2015-09-20T00:00:00.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

## Update a blacklist [/api/v1/locations/{location_id}/blacklists/{id}?blacklisted={params}]

### Update a blacklisted device [PATCH]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the blacklisted device you wish to update.
    + params (required, object, `1`) ... Mac and optional expiration date


+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 7,
            "blacklisted: {
                "mac": "00:22:22:11:22:33"
            }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "mac": "00:22:22:11:22:33",
            "expires_at": "2015-09-20T00:00:00.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

## Blacklisted Delete [/api/v1/locations/{location_id}/blacklisted/{id}]

### Delete a blacklisted device [DELETE]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the blacklisted device you wish to delete.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)

# Group Boxes

Boxes belong to locations and whilst you can read, update, destroy and perform other non-restful actions on a box (or boxes), you are not permitted to create a box without specifiying a location_id with the parameters.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Boxes Collection [/api/v1/boxes]

Lists all your boxes globally.

### List all Boxes [GET]

+ Response 200 (application/json)


    + Body

            [
                {
                    "nasname": "10.85.10.162",
                    "slug": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti AirRouter",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 2",
                    "state": "Online",
                    "can_reboot": true,
                    "rebooted": true
                },
                {
                    "nasname": "10.85.13.238",
                    "slug": "bzwZif_WftBTFkPDfjfJfA",
                    "calledstationid": "24-A4-3C-7C-FC-0A",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti UniFi",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 4",
                    "state": "Online",
                    "can_reboot": true
                },
                {
                    "nasname": "2.5.6.7",
                    "slug": "BFU1ZP9QeN0k3NSIIz8UQQ",
                    "calledstationid": "00-27-22-50-5C-E1",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": null,
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 5",
                    "state": "Online",
                    "can_reboot": false
                },
                {
                    "nasname": "10.85.18.146",
                    "slug": "fUMJ89X6s4MM1AajUHl-fQ",
                    "calledstationid": "24-A4-3C-02-37-67",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti UniFi AP Pro",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 5",
                    "state": "Online",
                    "can_reboot": true
                }
            ]

## Location Boxes Collection [/api/v1/locations/{location_id}/boxes]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Location Boxes [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body

            [
                {
                    "nasname": "10.85.10.162",
                    "slug": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "calledstationid": "DC-9F-DB-3D-AC-49",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti AirRouter",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 2",
                    "state": "Online",
                    "can_reboot": true,
                    "rebooted": true
                },
                {
                    "nasname": "10.85.13.238",
                    "slug": "bzwZif_WftBTFkPDfjfJfA",
                    "calledstationid": "24-A4-3C-7C-FC-0A",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti UniFi",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 4",
                    "state": "Online",
                    "can_reboot": true
                },
                {
                    "nasname": "2.5.6.7",
                    "slug": "BFU1ZP9QeN0k3NSIIz8UQQ",
                    "calledstationid": "00-27-22-50-5C-E1",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": null,
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 5",
                    "state": "Online",
                    "can_reboot": false
                },
                {
                    "nasname": "10.85.18.146",
                    "slug": "fUMJ89X6s4MM1AajUHl-fQ",
                    "calledstationid": "24-A4-3C-02-37-67",
                    "last_heartbeat": "August 21 2014 01:12:07",
                    "label_name": "success",
                    "location_id": 53,
                    "machine_type": "Ubiquiti UniFi AP Pro",
                    "location_name": "PS Bavan Testing AirRouter",
                    "description": "PS Bavan Testing AirRouter 5",
                    "state": "Online",
                    "can_reboot": true
                }
            ]

## Box Create [/api/v1/boxes{?calledstationid,description,location_id}]

### Create a Box [POST]

Don't forget, you must send the location_id with your request IN the box params. The following params are required:

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + calledstationid (required, string, `mac`) ... Mac address of the box.
    + description (required, text, `Upstairs, in the loft`) ... A description of the box.
    

+ Request (application/json)

        {
            "blacklisted": 
                {
                    "mac": "00:22:22:11:22:33",
                    "expires_at": "September 20 2015 00:00:00"
                }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "mac": "00:22:22:11:22:33",
            "expires_at": "2015-09-20T00:00:00.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

## Update a box [/api/v1/boxes/{id}{?params}]

### Update a box [PATCH]

+ Parameters

    + id (required, integer, `1`) ... ID of the blacklisted device you wish to update.
    + params (required, object, `1`) ... Any information about the box. A full list of params can be seen above.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 7,
            "blacklisted: {
                "mac": "00:22:22:11:22:33"
            }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "mac": "00:22:22:11:22:33",
            "expires_at": "2015-09-20T00:00:00.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

## Box Delete [/api/v1/boxes/{id}]

### Delete a box [DELETE]

+ Parameters

    + id (required, integer, `1`) ... ID of the box you wish to delete.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)

## Reboot a box [/api/v1/boxes/{id}/reboot]

### Reboot a box [POST]

+ Parameters

    + id (required, string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... ID (we use the slug) of the device you want to reboot.

+ Request (application/json)

        { "id": "JCyK7Zwh0ON_ZOWso8Mhuw" }

+ Response 200 (application/json)

        { response: "Please allow 2-3 minute for the device to reboot" }

+ Response 400 (application/json)

        { status: "unprocessable_entity" }

## Send a payload to a box or boxes [/api/v1/boxes/payloads{?payload_id,box_ids}]

### Send a payload to a box [POST]

+ Parameters

    + payload_id (string, `JCyK7Zwh0ON_ZOWso8Mhuw`) ... Unique ID of the payload you want to send to the box.
    + box_ids (array / string, `HSKJHKJH,HSJAJTR`) ... The slugs of the devices you want to receive the payloads.

+ Request (application/json)

        { "box":
                {
                    "payload_id": "JCyK7Zwh0ON_ZOWso8Mhuw",
                    "box_ids": ['ID', 'ID2', 'ID3']
                }
        }

+ Response 200 (application/json)

        { response: "Please allow 2-3 minute for the device to reboot" }

+ Response 400 (application/json)

        { status: "unprocessable_entity" }

# Group Events

Events related resources of the **Events API**. Events run at predefined intervals on your location's boxes.

You can, for example, disable the login screens at lunch or reboot your access point in the evening.

All events run on PolkaSpots boxes (running Stinky Panda). Third party boxes may only receive a selection of events.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Events Collection [/api/v1/locations/{location_id}/events]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Events for a location [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
    
            [
                {
                    "id": 115,
                    "location_id": 870,
                    "event_hour": "09:00",
                    "event_frequency": "Daily",
                    "payload_id": 34,
                    "description": "Reboot my access point ",
                    "unique_id": "6717550402069326522",
                    "slug": null,
                    "command_hash": null,
                    "experimental": false,
                    "premium": false,
                    "active": true,
                    "created_at": "2014-09-17T18:48:23.000+01:00",
                    "updated_at": "2014-09-17T18:48:23.000+01:00"
                }
            ]

## Create an Event [/api/v1/locations/{location_id}/events{?event}]

### Create an Event [POST]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + event (required, params, `polkaspots.com`) ... parameters required for the creation of the event.

+ Request (application/json)

            {
                "event_hour": "09:00",
                "event_frequency": "Daily",
                "payload_id": 34,
                "description": "Reboot my access point ",
            }

+ Response 200 (application/json)

            {
                "id": 115,
                "location_id": 870,
                "event_hour": "09:00",
                "event_frequency": "Daily",
                "payload_id": 34,
                "description": "Reboot my access point ",
                "unique_id": "6717550402069326522",
                "slug": null,
                "command_hash": null,
                "experimental": false,
                "premium": false,
                "active": true,
                "created_at": "2014-09-17T18:48:23.000+01:00",
                "updated_at": "2014-09-17T18:48:23.000+01:00"
            }

## Delete Event [/api/v1/locations/{location_id}/events/{id}]

### Delete an Event [DELETE]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the event you wish to delete.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)

# Group Firewall Rules

Firewall Rules related resources of the **Firewall Rules API**. Firewalls are a nested in a location. You cannot currently list all your walled gardens without specifying a location id (slug).

Not all the parameters listed in this spec are supported yet.

##Allowed HTTPs requests:

    - `POST` - Creates or updates a resource
    - `PATCH` - Updates a resource
    - `GET` - Retrieves a resource or list of resources
    - `DELETE` - Delete a resource

## Firewall Rules Collection [/api/v1/locations/{location_id}/firewall_rules]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Firewall Rules [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
    
            [
                {
                    "id": 4145,
                    "chain": "FORWARD",
                    "rule_spec": "A",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.4.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 1,
                    "created_at": "February 15 2014 19:27:05",
                    "updated_at": "February 15 2014 19:27:05"
                },
                {
                    "id": 4146,
                    "chain": "FORWARD",
                    "rule_spec": "A",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.210.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 2,
                    "created_at": "February 15 2014 19:27:05",
                    "updated_at": "February 15 2014 19:27:05"
                },
                {
                    "id": 5848,
                    "chain": "FORWARD",
                    "rule_spec": "I",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.4.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 1,
                    "created_at": "September 16 2014 17:53:15",
                    "updated_at": "September 16 2014 17:53:15"
                },
                {
                    "id": 5849,
                    "chain": "FORWARD",
                    "rule_spec": "I",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.210.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 2,
                    "created_at": "September 16 2014 17:53:15",
                    "updated_at": "September 16 2014 17:53:15"
                },
                {
                    "id": 5850,
                    "chain": "FORWARD",
                    "rule_spec": "I",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.4.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 1,
                    "created_at": "September 16 2014 17:53:49",
                    "updated_at": "September 16 2014 17:53:49"
                },
                {
                    "id": 5851,
                    "chain": "FORWARD",
                    "rule_spec": "I",
                    "string_patch": null,
                    "protocol": null,
                    "source_ip": "192.168.210.1/24",
                    "source_port": null,
                    "source_interface": null,
                    "out_interface": null,
                    "dest_ip": "local",
                    "dest_port": null,
                    "target": "DROP",
                    "limit": null,
                    "c_state": null,
                    "log_level": null,
                    "location_id": 870,
                    "position": 2,
                    "created_at": "September 16 2014 17:53:49",
                    "updated_at": "September 16 2014 17:53:49"
                }
            ]

## Firewall Rule Create [/api/v1/locations/{location_id}/firewall_rules{?firewall_rule}]

### Create a Firewall Rule [POST]

There's two ways to create a firewall rule. You can either post directly with a location id or you update the resource when updating a location. Please see the section within the location's group for more information. 

**CAUSES SYNC**

Please note, creating a new firewall rule will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + firewall_rule (required, object) ... A list of parameters you want to use to create the firewall rule.

+ Request (application/json)

        { "firewall_rule": 
            {
                "chain": "FORWARD",
                "rule_spec": "I",
                "protocol": null,
                "source_ip": "192.168.1.4/24",
                "source_port": null,
                "source_interface": null,
                "out_interface": null,
                "dest_ip": null,
                "dest_port": null,
                "target": "DROP",
                "limit": null,
                "c_state": null,
                "log_level": null
            }
        }
        

+ Response 200 (application/json)

        {
            "id": 594,
            "chain": "FORWARD",
            "rule_spec": "I",
            "protocol": null,
            "source_ip": "192.168.1.4/24",
            "source_port": null,
            "source_interface": null,
            "out_interface": null,
            "dest_ip": null,
            "dest_port": null,
            "target": "DROP",
            "limit": null,
            "c_state": null,
            "log_level": null,
            "location_id": 2213,
            "position": null,
            "created_at": "2014-09-17T02:10:34.708+01:00",
            "updated_at": "2014-09-17T02:10:34.708+01:00"
        }

## Firewall Rule Update [/api/v1/locations/{location_id}/firewall_rules/{id}?firewall_rule={?params}]

### Update a Firewall Rule [PATCH]

You can also update a firewall rule url by using the location's update method.

**CAUSES SYNC**

Please note, updating a firewall rule will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the walled garden you wish to update.
    + params (required, string, `params hash`) ... A list of parameters you wish to update.

+ Request (application/json)

        { "firewall_rule": 
            {
                "id": "594",
                "chain": "FORWARD",
                "rule_spec": "I",
                "protocol": null,
                "source_ip": "192.168.0.4/24",
                "source_port": null,
                "source_interface": null,
                "out_interface": null,
                "dest_ip": null,
                "dest_port": null,
                "target": "DROP",
                "limit": null,
                "c_state": null,
                "log_level": null
            }
        }

+ Response 200 (application/json)

        {
            "id": 594,
            "chain": "FORWARD",
            "rule_spec": "I",
            "protocol": null,
            "source_ip": "192.168.0.4/24",
            "source_port": null,
            "source_interface": null,
            "out_interface": null,
            "dest_ip": null,
            "dest_port": null,
            "target": "DROP",
            "limit": null,
            "c_state": null,
            "log_level": null,
            "location_id": 2213,
            "position": null,
            "created_at": "2014-09-17T02:10:34.708+01:00",
            "updated_at": "2014-09-17T02:10:34.708+01:00"
        }

## Firewall Rule Delete [/api/v1/locations/{location_id}/firewall_rules/{id}]

### Delete a Walled Garden [DELETE]

**CAUSES SYNC**

Please note, creating a new walled garden will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the firewall rule you wish to update.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)

# Group Locations

Locations related resources of the **Locations API**

TO DO: Add a list of parameters we can access.

## Locations Collection [/api/v1/locations]

### List all Locations [GET]

+ Request (application/json)

    + Header

            Accept: application/json

+ Response 200 (application/json)

        [{
            "id": 1687,
            "location_name": "Cafe International",
            "slug": "cafe-international-f84e1979-52e4-49ff-8d6e-ed808578b36a",
            "created_at": "May 6 2014 11:47:08",
            "network_name": "PolkaSpots",
            "location_address": "12 High Lane",
            "street": "12 High Lane",
            "phone1": "02071831471",
            "location_website": null,
            "location_type": null,
            "nas_count": 1,
            "archived": false,
            "development_mode": "Production",
            "daily_limit": true
        },
        {
            "id": 870,
            "location_name": "Derby - City Council",
            "slug": "derby-city-council",
            "created_at": "August 19 2013 11:50:04",
            "network_name": "Meraki",
            "location_address": "Corporation Street Derby ",
            "street": "",
            "phone1": "01332293111",
            "location_website": "www.surfthecity.co.uk",
            "location_type": "186",
            "nas_count": 5,
            "archived": false,
            "development_mode": "Production",
            "daily_limit": true
        }]

## Locations Search [/api/v1/locations?q={search}]

### Search for locations [GET]

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            { "q": "derby" }

+ Response 200 (application/json)

        [{
            "id": 870,
            "location_name": "Derby - City Council",
            "slug": "derby-city-council",
            "created_at": "August 19 2013 11:50:04",
            "network_name": "Meraki",
            "location_address": "Corporation Street Derby ",
            "street": "",
            "phone1": "01332293111",
            "location_website": "www.surfthecity.co.uk",
            "location_type": "186",
            "nas_count": 5,
            "archived": false,
            "development_mode": "Production",
            "daily_limit": true
        }]

## Locations Short List [/api/v1/locations?short={yep}]

Returns a mini-list of your locations. Is good for search, cloning the logins, stuff where you don't need much info.

### Search for locations [GET]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body

            { "short": "yep" }

+ Response 200 (application/json)

        [{
            "location_name": "Derby - City Council",
            "slug": "derby-city-council",
            "unique_id": "7379871298798717"
        }]

## Create a location [/api/v1/locations{?location}]

Default required params include:

- location_name
- address
- town
- postcode

You may send an array of mac addresses to create boxes associated with the location. This must follow the following convention:

    { "boxes": { "ap_mac": ["00:22:22:11:22:33", "66:22:11:22:33:44"] }

You can also send a facebook_id with your request. Doing so will cause CT to totally ignore the data you've sent. Instead, Cucumber Tony will contact Facebook and grab the information from them instead.

    { "location": { "facebook_id": "valid-fb-id" } }
+ Parameters

    + location (required, JSON object, `location_name: derby-city-council`) ... JSON object of all the parameters you wish to create your location with.

### Create a Location [POST]

+ Request (application/json)

        "location":
            {
                "location_name": "Derby Council",
                "address": "1 Really Long Road",
                "town": "A far away land",
                "postcode": "EC1M",
                "phone1": '01604 134 1679',
                "facebook_id": "187263871623"
            },
        "boxes":
            { "ap_mac": ["AA:BB:CC:DD:EE:FF:11"] }

+ Response 200 (application/json)

        {
            "id": 1768,
            "slug": "derby-ff3b5382-baa5-4ecd-945a-526427e057a1",
            "created_at": "September24201419: 07: 09",
            "attr_generated": false,
            "location_address": "62 Britton Street",
            "location_name": "PolkaSpots"
        }

## Location [/location/{id}]

A single Location object with all its details

+ Parameters
    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Retrieve a Location [GET]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "id": 870,
                "location_name": "Derby City Council",
                "unique_id": "xxx",
                "slug": "derby-city-council",
                "created_at": "August 19 2013 11:50:04",
                "updated_at": "September 8 2014 14:41:58",
                "location_info": "This Wi-Fi service is provided by Derby City Council.",
                "location_info_two": "",
                "location_address": "The High Street",
                "street": "Derby",
                "postcode": "DE1 2FS",
                "town": "Derby",
                "country": "United Kingdom",
                "website": null,
                "geocode": null,
                "email_owner": "",
                "phone1": "02071831471",
                "location_website": "www.surfthecity.co.uk",
                "sanitised_website": "surfthecity.co.uk",
                "created_by": null,
                "location_notes": null,
                "success_url": "",
                "network_name": "Meraki",
                "average_spend": null,
                "api_token": "xxx",
                "state": "stage_6",
                "archived": false,
                "newsletter_enabled": false,
                "newsletter_list_id": null,
                "newsletter_type": "0",
                "newsletter_api_token": null,
                "location_twitter": "derbymuseums",
                "latitude": null,
                "longitude": null,
                "gmaps": false,
                "passwd_change_day": null,
                "passwd_auto_gen": false,
                "ssid": "PolkaSpots Supafly Wi-Fi",
                "channel": "auto",
                "whitelist_mac": null,
                "uampass": null,
                "chilli_network": "192.168.4.0",
                "chilli_netmask": "255.255.255.0",
                "chilli_uamlisten": "192.168.4.1",
                "chilli_uamport": "3990",
                "chilli_dns1": "208.67.222.222",
                "chilli_dns2": "208.67.220.220",
                "chilli_radius": "cluster-1.polkaspots.co",
                "chilli_radius1": "cluster-2.polkaspots.co",
                "chilli_uamallow": "8.8.8.8,208.67.222.222,208.67.220.220",
                "chilli_uamsecret": "xxx",
                "encryption": "none",
                "encryption_key": null,
                "encryption_private": "psk",
                "encryption_private_key": "406c6e9b4dbe",
                "ssid_private": "PolkaSpots Private",
                "ssid_disabled": false,
                "ssid_private_disabled": true,
                "network_private": "private",
                "network": "lan",
                "network_country": "GB",
                "ssid_hidden": false,
                "ssid_private_hidden": false,
                "tx_power_2": "20",
                "tx_power_5": "20",
                "ht_mode_2": "HT20",
                "ht_mode_5": "HT20",
                "channel_5": "auto",
                "lan_ipaddr": "192.168.210.1",
                "lan_dhcp_start": 2,
                "lan_dhcp_end": 150,
                "lan_dhcp_lease": "12h",
                "wan_mtu": 1500,
                "development_mode": "Production",
                "network_settings": 1,
                "block_access_to_local": true,
                "enforce_limit": null,
                "authorised_domain": "mywifi",
                "content_filter": "Security",
                "wisp_id": 1,
                "product_order_id": null,
                "access_password": "a0da85",
                "shop_active": false,
                "access_type_description": "",
                "login_screens_disabled": false,
                "timed_access": true,
                "daily_limit": true,
                "weekly_limit": false,
                "monthly_limit": false,
                "secondary_access_active": false,
                "auto_login": true,
                "auto_login_time": 0,
                "fb_login_on": true,
                "fb_login_checkin_req": false,
                "fb_login_checkin_allow": false,
                "fb_login_leave_msg": false,
                "facebook_cover_id": null,
                "facebook_cover_url": null,
                "social_login_vouchers": false,
                "use_ps_twillio": true,
                "twillio_from_number": null,
                "twillio_username": null,
                "twillio_token": null,
                "default_currency": "GBP",
                "foursq_id": "4b9fb6e4f964a520c13737e3",
                "foursq_category": null,
                "foursq_name": null,
                "foursq_verified": false,
                "foursq_url": null,
                "facebook_products": null,
                "facebook_username": "derbymuseums",
                "facebook_id": "",
                "facebook_link": "http://facebook.com/derbymuseums",
                "facebook_hours": null,
                "google_url": null,
                "google_hours": null,
                "google_reference": null,
                "add_to_global_map": true,
                "login_header_image": 2,
                "login_background_image": 2,
                "login_css_heading_text_colour": "#ffffff",
                "login_css_body_text_colour": "#796f66",
                "login_css_border_colour": "#9dd8dd",
                "login_css_link_colour": "#ffffff",
                "login_css_container_colour": "#9dd8dd",
                "login_css_container_transparency": "1",
                "login_css_button_colour": "#000000",
                "login_css_header_colour": "#5F7883",
                "login_css_error_colour": "#a12c6c",
                "login_terms_url": "http://polkaspots.com/wifi-terms",
                "location_image_file_name": "STC.png",
                "logo_file_name": "",
                "logo_content_type": "image/png",
                "body_background_color": "#9dd8dd",
                "background_file_name": "white.jpg",
                "login_design": 1,
                "login_words_position": "Left",
                "login_logo_position": "Left",
                "custom_css": null,
                "login_container_inner_width": "95%",
                "login_bg_dimension": "full",
                "login_css_heading_text_size": "40px",
                "login_css_heading_2_text_size": "18px",
                "login_css_heading_2_text_colour": "#796f66",
                "login_css_heading_3_text_size": "18px",
                "login_css_heading_3_text_colour": "#796f66",
                "login_button_text": "Login Now",
                "fsq_login_checkin_allow": false,
                "font_family": "'Helvetica Neue',sans-serif",
                "login_btn_font_size": "18px",
                "login_btn_font_colour": "#d396c3",
                "container_width": "600px",
                "logins_forgot_password": false,
                "external_css_url": null,
                "skip_user_registration": false,
                "remove_registration_link": false,
                "logins_redirect_url": null,
                "font_size": "15px",
                "location_header": "Welcome to Surf the City",
                "li_login_on": false,
                "flume_enabled": false,
                "meraki_validator": null,
                "attr_generated": true,
                "location_categories": "Government Building"
            }

### Update a Location [PATCH]

  TBC
    
+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

### Remove a Location [DELETE]

 TBC

+ Response 204

## Location Statistics [/location/{id}/stats]

A single Location's statistical objects

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Retrieve a Location's Statistics [GET]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "slug": "derby-city-council",
                "lat": null,
                "lon": null,
                "sessions": 0,
                "uniques": 0,
                "minutes_online": 0,
                "downloads": 0,
                "busiest_hr": null,
                "busiest_day": null,
                "total_sales": 0,
                "qnty_sales": 0,
                "range": "07/28/2014 - 09/08/2014",
                "chart_series": {
                    "Sessions": "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                    "Unique users": "[0,16,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]"
                },
                "audience": [],
                "loyalty": {
                    "new": 0,
                    "returning": null
                },
                "geojson": [
                    {
                        "lat": null,
                        "lon": null,
                        "title": "Derby City Council 6",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby City Council 6",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    },
                    {
                        "lat": "28.15303332447874",
                        "lon": "-60.83188607793834",
                        "title": "Derby City Council",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby City Council",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    },
                    {
                        "lat": "-24.1850770453765",
                        "lon": "-162.5053433148802",
                        "title": "Derby City Council",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby City Council",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    },
                    {
                        "lat": "-39.74956573964626",
                        "lon": "176.4442398543561",
                        "title": "Derby Council 2",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby Council 2",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    },
                    {
                        "lat": null,
                        "lon": null,
                        "title": "Derby - City Council 6",
                        "slug": "xxx",
                        "colour": "#DE2AE5",
                        "network": "meraki",
                        "description": "Derby - City Council 6",
                        "mac": "00-18-0A-XX-XX-XX",
                        "sessions": null,
                        "heartbeat": null
                    }
                ],
                "top_boxes": []
            }
                
## Location Access Settings [/location/{id}/access]
A single Location's access settings. Use this to adjust the type of login screens you want to offer, download speeds or even activate social logins.

The list of parameters you can update using this action are listed below. If you need to update those not listed, use vanilla **update**.
+ Parameters
    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Retrieve a Location's Access Settings [GET]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "slug": "derby-city-council",
                "location_name": "Derby City Centre",
                "timed_access": true,
                "passwd_auto_gen": true,
                "email_owner": "bob@ps.com",
                "access_password": "a0da85",
                "passwd_change_day": [
                    "0",
                    "1",
                    "2"
                ],
                "daily_limit": false,
                "weekly_limit": false,
                "monthly_limit": true,
                "logins_forgot_password": false,
                "fb_login_on": true,
                "li_login_on": false,
                "facebook_id": "derbymuseums",
                "facebook_username": "derbymuseums",
                "fb_page_cache_processing": false,
                "fb_login_checkin_allow": false,
                "shop_allowed": true,
                "shop_active": false,
                "secondary_access_active": true,
                "secondary_access_allowed": true,
                "access_types": {
                    "primary_access": {
                        "name": "Social",
                        "id": 7
                    },
                    "secondary_access": {
                        "name": "Password",
                        "id": 1
                    }
                },
                "policy": {
                    "id": 1189,
                    "maximum_data_rate_upstream": 1024,
                    "maximum_data_rate_downstream": 8448,
                    "max_daily_session": 60,
                    "max_weekly_session": 22,
                    "max_monthly_session": 604,
                    "session_timeout": 1440,
                    "idle_timeout": 120,
                    "simultaneous_use": 22
                },
                "shop": {
                    "id": 2,
                    "shop_name": "The Bridge Street Collective Wi-Fi",
                    "unique_id": "ssss7876xs"
                },
                "facebook_page_valid": false,
                "sms_details_valid": [],
                "available_access_types": [
                    {
                        "name": "Password",
                        "id": 1
                    },
                    {
                        "name": "Vouchers",
                        "id": 2
                    },
                    {
                        "name": "Clickthrough",
                        "id": 3
                    },
                    {
                        "name": "Facebook",
                        "id": 6
                    },
                    {
                        "name": "Social",
                        "id": 7
                    }
                ],
                "available_secondary_access": [
                    {
                        "name": "Password",
                        "id": 1
                    },
                    {
                        "name": "Vouchers",
                        "id": 2
                    },
                    {
                        "name": "Clickthrough",
                        "id": 3
                    },
                    {
                        "name": "Facebook",
                        "id": 6
                    },
                    {
                        "name": "Social",
                        "id": 7
                    }
                ]
            }
            
### Update a Location's Access Settings [PATCH]

+ Request (application/json)

    time_limit == ['daily', 'weekly', 'monthly']

    + Header
    
                Accept: application/json


    + Body
    
            { "location": 
                {
                    "slug": "derby-city-council",
                    "location_name": "Derby City Centre",
                    "timed_access": true,
                    "passwd_auto_gen": true,
                    "email_owner": "simon@ps.com",
                    "access_password": "a0da85",
                    "passwd_change_day": [
                        "0",
                        "1",
                        "2"
                    ],
                    "time_limit": 'daily',
                    "logins_forgot_password": false,
                    "fb_login_on": true,
                    "li_login_on": false,
                    "facebook_id": "derbymuseums",
                    "facebook_username": "derbymuseums",
                    "fb_login_checkin_allow": false,
                    "fb_login_leave_msg": false,
                    "secondary_access_active": true,
                    "secondary_access_allowed": true,
                    "shop_active": true,
                    "access_types": {
                        "primary_access": {
                            "name": "Social",
                            "id": 7
                        },
                        "secondary_access": {
                            "name": "Password",
                            "id": 1
                        }
                    },
                    "available_access_types": [
                        {
                            "name": "Password",
                            "id": 1
                        },
                        {
                            "name": "Vouchers",
                            "id": 2
                        },
                        {
                            "name": "Clickthrough",
                            "id": 3
                        },
                        {
                            "name": "Facebook",
                            "id": 6
                        },
                        {
                            "name": "Social",
                            "id": 7
                        }
                    ],
                    "available_secondary_access": [
                        {
                            "name": "Password",
                            "id": 1
                        },
                        {
                            "name": "Vouchers",
                            "id": 2
                        },
                        {
                            "name": "Clickthrough",
                            "id": 3
                        },
                        {
                            "name": "Facebook",
                            "id": 6
                        },
                        {
                            "name": "Social",
                            "id": 7
                        }
                    ]
                    "policy": {
                        "maximum_data_rate_upstream": 1024,
                        "maximum_data_rate_downstream": 8448,
                        "max_daily_session": 60,
                        "max_weekly_session": 22,
                        "max_monthly_session": 604,
                        "session_timeout": 1440,
                        "idle_timeout": 120,
                        "simultaneous_use": 22
                    },
                    "shop": {
                        "shop_name": "The Bridge Street Collective Wi-Fi",
                        "unique_id": "2927039401028770904"
                    },
                }
            }

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            { }
            
## Verify a Facebook Page [/location/{id}/fb_verify_page?page_id={page_id}]

Checks if your Facebook page is valid or not. Will return a 422 Unprocessable Entity if it's not a valid page.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + page_id (required, string, `derbycouncil`) ... Page ID `page_id` of the page you want to test. Has example value.

### Determines if your Facebook page id is valid [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body 
    
            { "id": "derby-council", page_id: "123123123" }
    
+ Response 200 (application/json)

    + Body
    
            { "message": "This is a valid page" }

## Get a list of your Facebook Pages [/location/{id}/fb_get_pages?auth={authResponse}]

This will create a background job to get a list of your Facebook page ids. The first request will create the job - you will receive a 422 error if you post again within 5 minutes while the job's processing. Once we've collected your pages, we'll return them as a JSON object.

You need to send us your Facebook accessToken for us to get these. We recommend using the FB JS SDK to get this. **We do not have a public API to generate these details.**

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + auth (required, json, `{"accessToken": "your_facebook_auth_token", "userId": "your_id", "expiresIn": 86400}`) ... A JSON object containing a accessToken, userId and expiresIn values. These come straight from the FB api.
    
### Gets a list of your Facebook pages [POST]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body
    
            { "message": "Getting a list of your pages" }

+ Response 201 (application/json)

    + Header

            Accept: application/json

    + Body
    
            { 
                "pages": [
                    {
                        "category": "Internet/software",
                        "category_list": [
                            {
                                "id": "2256",
                                "name": "Internet/Software"
                            }
                        ],
                        "name": "PolkaSpots",
                        "access_token": "xxx",
                        "perms": [
                            "ADMINISTER",
                            "EDIT_PROFILE",
                            "CREATE_CONTENT",
                            "MODERATE_CONTENT",
                            "CREATE_ADS",
                            "BASIC_ADMIN"
                        ],
                        "id": "185269478190861"
                    },
                    {
                        "category": "Community",
                        "name": "Public Wi-Fi",
                        "access_token": "xxx",
                        "perms": [
                            "ADMINISTER",
                            "EDIT_PROFILE",
                            "CREATE_CONTENT",
                            "MODERATE_CONTENT",
                            "CREATE_ADS",
                            "BASIC_ADMIN"
                        ],
                        "id": "138118009562188"
                    },
                    {
                        "category": "Product/service",
                        "name": "Smart Wi-Fi",
                        "access_token": "xxx",
                        "perms": [
                            "ADMINISTER",
                            "EDIT_PROFILE",
                            "CREATE_CONTENT",
                            "MODERATE_CONTENT",
                            "CREATE_ADS",
                            "BASIC_ADMIN"
                        ],
                        "id": "148495501855997"
                    }
                ]
            }

+ Response 422 (application/json)

    + Header

            Accept: application/json

    + Body
    
            { "message": "Already processing a request." }

## Location layouts [/location/{id}/layout]

Some params that are just required for the login pages. You may also use the standard location#show method however this is optimised for speed and includes only the attributes you need. Update the settings with a standard PATCH UPDATE.

Remarkably, you can send any image reference back as url. Either you use our content delivery network (CDN) by uploading a photo using Cucumber Tony. Or, just post a valid URL back. And then make sure you've added the domain to your walled gardens.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Retrieve a Location's Layout Settings [GET]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "location_name": "Derby City Centre",
                "slug": "derby-city-council",
                "unique_id": "8798727298729872",
                "login_design": 1,
                "login_header_image": 1,
                "login_logo_position": "Left",
                "login_background_image": 1,
                "body_background_color": "#FFFFFF",
                "clone_logins_processing": false,
                "logo_file_name": null,
                "background_file_name": null,
                "location_header": "Welcome to Surf the City Poo",
                "location_info": "This Wi-Fi service is provided by Derby City Council.",
                "location_info_two": "",
                "location_website": "www.surfthecity.co.uk",
                "address_string": "12 Big Lane",
                "login_css_heading_text_colour": "#5c7883",
                "login_css_heading_2_text_colour": "#333333",
                "login_css_heading_3_text_colour": "#333333",
                "login_css_body_text_colour": "#575757",
                "login_css_border_colour": "#cccccc",
                "login_css_link_colour": "#381515",
                "login_css_container_colour": "#ffffff",
                "login_css_container_transparency": "1",
                "login_css_button_colour": "#000000",
                "login_css_header_colour": "#5F7883",
                "login_css_error_colour": "#ed561b",
                "font_family": "'Courier New', Courier, monospace",
                "login_btn_font_size": "18px",
                "login_btn_font_colour": "#000000",
                "container_width": "600px",
                "login_container_inner_width": "95%",
                "login_bg_dimension": "full",
                "login_css_heading_text_size": "24px",
                "login_css_heading_2_text_size": "18px",
                "login_css_heading_3_text_size": "15px",
                "font_size": "15px",
                "login_button_text": "Login Now",
                "login_container_float": "Center",
                "external_css_allowed": true
            }
        
## Duplicate / Clone Login Pages [/location/{id}/duplicate_logins?location_ids={location_ids}]

Clone the login design from the location to another one of your locations. Location IDS of the locations to receive the new designs can be passed as an array in the query string.

+ Parameters
    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + location_ids (required, array, `[123,456,798]`) ... Array `location_ids` of the locations you want to *get* the new designs. Has example value.

### Retrieve a Location's Layout Settings [POST]

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {"message": "Your logins have been queued for duplication. This may take a few minutes."}

## Get Location Users [/location/{id}/users]

Get a list of all the users who have access to your location. The output will include four keys - **owner, admins, invites, watchers**

- The owners object contains details of the primary user's plan.
- The admin users object contains all users will admin rights to the location.
- The invites object represents and invitations which have been sent recently.
- The watchers object containts non-admin, read only users for the location

+ Parameters
    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Get a list of location users and watchers [GET]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            { "id": "derby-city-council" }

+ Response 200 (application/json)

    + Header

            Accept: application/json

    + Body

            {
                "location_name": "Derby City Centre",
                "unique_id": "432692681892998301233",
                "slug": "derby-city-council",
                "admin_users": {
                    "admins": [
                        {
                            "email": "bob@derby.gov.uk",
                            "username": "Bob Marley",
                            "unique_id": "29789523",
                            "slug": "bob-marley"
                        },
                        {
                            "email": "support@polkaspots.com",
                            "username": "Steve Jobs",
                            "unique_id": "82052203",
                            "slug": "steve-jobs"
                        }
                    ],
                    "watchers": [
                        {
                            "name": "Simon Stanley",
                            "token": "e598110e2109b4189d61d3629aec21f5b69c5b375659d8401f9f4274367ecb50",
                            "id": 103,
                            "unique_id": "HKJHSH86"
                        }
                    ],
                    "owner": {
                        "username": "Barry White",
                        "slug": "barry-white",
                        "unique_id": "206923464",
                        "email": "barry@derby.gov.uk",
                        "plan_name": "Enterprise",
                        "max_location_users": 10
                    },
                    "invites": [
                        {
                            "token": "e7adddb4e68a6f250a57b3f7b1dd31e3",
                            "email": "user@polkaspots.com",
                            "created_at": "1410737982"
                        },
                        {
                            "token": "e924c0ae9ea4a462a55dbd7be6d0ee23",
                            "email": "user2@polkaspots.com",
                            "created_at": "1410737979"
                        },
                        {
                            "token": "a863527a40c694173d59ef5c5201d307",
                            "email": "user3@polkaspots.com",
                            "created_at": "1410737976"
                        }
                    ]
                }
            }

## Add a user to a location [/location/{id}/users?email={email}]

The number of users you can add to a location depends on the primary user's plan. You can't add the same user twice.

If you invite a user who's already got a Cucumber Tony account, the location you add them too will be added to their account and they will receieve an email with these details.

For new users (those without an account), they will receive an invitation to join CT. **They have three days to accept this invitation**, after which, you will need to invite them again.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + email (required, string, `user@address.com`) ... Email `email` of the user you want to add to the location.
    
### Add a new user to a location [POST]

+ Request (application/json)

        { "email": "steveo@ps.com" }

+ Response 200 (application/json)


    + Body

            { "message": "Congrats, you've successfully invited stevo@ps.com" } 

## Delete an admin user from a  location [/location/{id}/users?user_id={user_id}&token={token}]

Only admins (owners) can do this. It's not possible to delete yourself.

You can either send a user_id of an admin user or the token of an invited user. Use the token if you want to revoke a recent invitation to a user who's not already signed up.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + user_id (string, `918273918723`) ... Unique ID `unique_id` of the user you want to delete from the location.
    + token (string, `HGVSGSKJHHA87&Ah`) ... Token of a recently invited user
    
### Add a new user to a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body    

            { "user_id": "1298391827391827" }

+ Response 200 (application/json)

    + Body

            { "message": "Successfully deleted user" } 

+ Response 422 (application/json)

    + Body

            { "message": "You cannot delete yourself from this location" } 

## Watch a specific location [/location/{id}/watchers?{?user_ids}]

You can add users to a location who have no rights and can only observe. These users can receive alerts but cannot make changes.

This job is processed in the background and you may have to wait a few moments for the change to occur.

A status attribute is set called **watchers_processing** which is available using the show action. It will either be:

- Removing
- Adding
- False

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + user_ids (required, string, `918273918723`) ... An array of user's unique_ids that you want to add to the watchers list.

### List watchers for a location [GET]

+ Request (application/json)

            {}
            
+ Response 200 (application/json)


    + Body

            {  } 

### Add a new watchers to a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body

            { "user_ids": "918273918273" }

+ Response 200 (application/json)

    + Headers
    
            Accept: application/json

    + Body

            { "message": "Congrats, you've successfully invited stevo@ps.com" } 

### Remove a watcher from a location [DELETE]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body 
    
            { "user_ids": "918273918273" }


+ Response 200 (application/json)

    + Headers
    
            Accept: application/json

    + Body

            { "message": "Your request has been queued" } 

## Clone a specific location [/location/{id}/duplicate{?location_name,address,users}]

Create a carbon copy of a location.

This job is processed in the background and you can't copy a location while there's already a clone in process. To check for the clone status, use the show action and attribute **clone_processing**. This will be true if there's a job underway.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + location_name (required, string, `My New Site`) ... The name of the new location.
    + address (required, string, `12 High Road, Derby D11`) ... The address of the new location, also required.
    + users (not-required, string, `true`) ... You can also copy existing admin users to the new location by setting this flag.

### Duplicate a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            {
                "id": "derby-council",
                "location_name": "My New Site",
                "address": "12 High Road, Derby D1",
                "users": 'any-value'
            }

+ Response 200 (application/json)

    + Body

            { "message": "Your location has been queued for duplication. This may take a few minutes." } 

## Archive a specific location [/location/{id}/archive]

If you don't want to delete a location permanently, you can choose to archive it instead. Archived locations don't count towards your quota and you cannot use an archived location for public access.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Archive a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            { "id": "derby-council", }

+ Response 200 (application/json)

    + Body

            { "message": "Your location has been archived" } 

## Restore / Unarchive a specific location [/location/{id}/unarchive]

Restore an archived location to it's former glory.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### Archive a location [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
          
            { "id": "derby-council" }

+ Response 200 (application/json)

    + Body

            { "message": "Your location has been unarchived" } 

## Update a Location's firewall rules [/api/v1/location/{id}{?location,firewall_rules_attributes,params}]

You can either create firewall rules directly with the Firewall Rules API or you may update, create and delete when updating a location.

You must wrap the firewall_rules_attributes params in the location params. 

To delete a rule, simply set the _destroy field to 1.

By sending the ID of the firewall rule, we will assume you're going to update the values.

**NOTES**

Whilst it's ok to send the whole location object back when updating the firewall rules, your response times will be faster if you reduce the size of the request (see request below for an example). We'd recommend sending only the required location params back, id, slug and any others you may want to update.

+ Parameters

    + id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + location (required, object ) ... An object which contains the firewall rule attributes
    + firewall_rules_attributes (required, object ) ... An object of firewall rule attributes

### Update your firewall rules [PATCH]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            {"location":
                {
                    "slug": "derby-city-council",
                    "id": 870,
                    "block_access_to_local": true,
                    "firewall_rules_attributes": [
                        {
                            "id": 5850,
                            "chain": "FORWARD",
                            "rule_spec": "I",
                            "string_patch": null,
                            "protocol": null,
                            "source_ip": "192.168.4.124",
                            "source_port": 12,
                            "source_interface": null,
                            "out_interface": null,
                            "dest_ip": "local",
                            "dest_port": 34,
                            "target": "ACCEPT",
                            "limit": null,
                            "c_state": null,
                            "log_level": null,
                            "location_id": 870,
                            "position": 1
                        },
                        {
                            "id": 5851,
                            "chain": "FORWARD",
                            "rule_spec": "I",
                            "string_patch": null,
                            "protocol": null,
                            "source_ip": "192.168.210.124",
                            "source_port": null,
                            "source_interface": null,
                            "out_interface": null,
                            "dest_ip": "local",
                            "dest_port": null,
                            "target": "ACCEPT",
                            "limit": null,
                            "c_state": null,
                            "log_level": null,
                            "location_id": 870,
                            "position": 2
                        },
                        {
                            "id": 5852,
                            "chain": "FORWARD",
                            "rule_spec": "A",
                            "string_patch": null,
                            "protocol": null,
                            "source_ip": "192.168.4.124",
                            "source_port": 1212,
                            "source_interface": null,
                            "out_interface": null,
                            "dest_ip": "local",
                            "dest_port": 1212,
                            "target": "ACCEPT",
                            "limit": null,
                            "c_state": null,
                            "log_level": null,
                            "location_id": 870,
                            "position": null,
                            "_destroy": "1"
                        }
                    ]
                }
            }

+ Response 200 (application/json)

    + Body

            { "message": "You have updated Derby Council" } 

## Test your newsletter settings [/api/v1/locations/{location_id}/newsletter_test]

After you've created your newsletter, we can programatically test if your credentials are correct.

This entails calling either the MailChimp or Campaign Monitor APIs and adding an email. If it's a success, we'll post the results back with the location parameter **newsletter_test_results**. This will be one of the following:

- NULL - test not run or key expired
- true - test passed, everything is ok
- false - test failed, please try new credentials

### Test your newsletter settings [POST]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

+ Request (application/json)
    
        {
            "id": "your-id",
        }

+ Response 200 (application/json)

        {
            "message": "Successfully created payload to test newsletter.",
            "status": "processing"
        }
        
# Group Networks

Networks related resources of the **Networks API**. Networks are a nested in a location. 

##Allowed HTTPs requests:

- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Networks Collection [/api/v1/locations/{location_id}/networks]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Networks [GET]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
        
            [{
                {
                    "id": 5737,
                    "network_name": "public",
                    "description": "Primary network",
                    "position": 1,
                    "active": true,
                    "network_radio_mode": null,
                    "switch_ports_enabled": null,
                    "vlan_type": null,
                    "interface_id": null,
                    "interface_name": "tun0",
                    "interface_type": null,
                    "interface_proto": null,
                    "interface_ipaddr": "192.168.4.1",
                    "interface_netmask": "24",
                    "vlan_id": null,
                    "dhcp_start": 100,
                    "dhcp_end": 250,
                    "dhcp_lease": null,
                    "dhcp_limit": null,
                    "captive_portal_url": null,
                    "captive_portal_network": "192.168.4.0",
                    "captive_portal_netmask": "255.255.255.0",
                    "captive_portal_gateway": "192.168.4.1",
                    "captive_portal_port": 3990,
                    "captive_portal_dns_1": "208.67.222.222",
                    "captive_portal_dns_2": "208.67.220.220",
                    "captive_portal_uamsecret": "163de366f42a21b1b4d7de655eae1c7d",
                    "captive_portal_allowed_hosts": "8.8.8.8,208.67.222.222,208.67.220.220",
                    "content_filter": "Security"
                    "captive_portal_allowed_macs": "",
                    "radius_host_1": "cluster-1.polkaspots.co",
                    "radius_host_2": "cluster-2.polkaspots.co",
                    "radius_secret_1": "b2ea72c68d50",
                    "radius_secret_2": "b2ea72c68d50",
                    "ssid": "PolkaSpots Supafly Wi-Fi",
                    "radio_channel_0": "auto",
                    "radio_channel_1": "auto",
                    "encryption_type": "psk2",
                    "encryption_key": "asdfasdfasd",
                    "ssid_disabled": false,
                    "ssid_hidden": true,
                    "created_at": "2014-09-16T19:38:22.000+01:00",
                    "dhcp_enabled": true,
                    "dhcp_relay_on": true,
                    "config_type_bridge": false,
                    "bridge_to_switch_ports": false,
                },
                {
                    "id": 5738,
                    "network_name": "private",
                    "description": "Secondary network",
                    "position": 2,
                    "active": true,
                    "network_radio_mode": null,
                    "switch_ports_enabled": null,
                    "vlan_type": null,
                    "interface_id": null,
                    "interface_name": "br-private",
                    "interface_type": null,
                    "interface_proto": null,
                    "interface_ipaddr": "192.168.210.1",
                    "interface_netmask": "24",
                    "vlan_id": null,
                    "dhcp_start": 2,
                    "dhcp_end": 150,
                    "dhcp_lease": null,
                    "dhcp_limit": null,
                    "captive_portal_url": null,
                    "captive_portal_network": "192.168.4.0",
                    "captive_portal_netmask": "255.255.255.0",
                    "captive_portal_gateway": "192.168.4.1",
                    "captive_portal_port": 3990,
                    "captive_portal_dns_1": "198.153.192.40",
                    "captive_portal_dns_2": "198.153.194.50",
                    "captive_portal_uamsecret": null,
                    "captive_portal_allowed_hosts": null,
                    "captive_portal_allowed_macs": null,
                    "content_filter": "Security"
                    "radius_host_1": "radius-1.polkaspots.co",
                    "radius_host_2": "radius-2.polkaspots.co",
                    "radius_secret_1": null,
                    "radius_secret_2": null,
                    "ssid": "PolkaSpots Private",
                    "radio_channel_0": "auto",
                    "radio_channel_1": "auto",
                    "encryption_type": "psk2",
                    "encryption_key": "406c6e9b4dbe",
                    "ssid_disabled": null,
                    "ssid_hidden": null,
                    "created_at": "2014-09-16T19:38:22.000+01:00",
                    "dhcp_enabled": true,
                    "dhcp_relay_on": true,
                    "config_type_bridge": false,
                    "bridge_to_switch_ports": false
                }
            }]
        
## Network Details [/api/v1/locations/{location_id}/networks/{id}]

### Update a Network [GET]

You have four options for content filtering / DNS. If you pass one of the three options with the content filter, your DNS settings will be overriden:

- Security
- Family
- Danger
- Adult

These are case insenstive.

If you want to set your own DNS, please pass 'None' as a content filtering parameter. If you set the DNS to nil values, they will be reset to 8.8.8.8 and 8.8.4.4

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the network you wish to update.

+ Request (application/json)

    + Headers
    
            Accept: application/json
    
    + Body
    
            {   
                "location_id": "derby-council",
                "id": 123
            }

+ Response 200 (application/json)

    + Body
    
            {
                "100": null,
                "id": 610,
                "location_id": 1759,
                "description": "Primary network",
                "position": 1,
                "network_name": "public",
                "active": true,
                "network_radio_mode": null,
                "switch_ports_enabled": null,
                "vlan_type": null,
                "interface_id": null,
                "interface_name": "tun0",
                "interface_type": null,
                "interface_proto": null,
                "interface_ipaddr": "192.168.4.1",
                "interface_netmask": "24",
                "vlan_id": null,
                "dhcp_start": 100,
                "dhcp_end": 250,
                "dhcp_lease": null,
                "12h": null,
                "dhcp_limit": null,
                "captive_portal_url": null,
                "captive_portal_network": "192.168.4.0",
                "captive_portal_netmask": "255.255.255.0",
                "captive_portal_gateway": "192.168.4.1",
                "captive_portal_port": 3990,
                "captive_portal_dns_1": "208.67.222.222",
                "captive_portal_dns_2": "208.67.220.220",
                "captive_portal_uamsecret": "52ea627a236c7043adc36bbd463d6bf4",
                "captive_portal_allowed_hosts": "8.8.8.8,208.67.222.222,208.67.220.220",
                "captive_portal_allowed_macs": null,
                "content_filter": "Off"
                "radius_host_1": "rad-1.polkaspots.com",
                "radius_host_2": "rad-1.polkaspots.com",
                "radius_secret_1": "3543f9e498e8",
                "radius_secret_2": "3543f9e498e8",
                "ssid": "PolkaSpots Supafly Wi-Fi",
                "radio_channel_0": "auto",
                "radio_channel_1": "auto",
                "encryption_type": "none",
                "encryption_key": null,
                "ssid_disabled": false,
                "ssid_hidden": false,
                "created_at": "2014-09-17T01:09:45.000+01:00",
                "updated_at": "2014-09-17T01:09:45.000+01:00",
                "dhcp_enabled": true,
                "dhcp_relay_on": true,
                "config_type_bridge": false,
                "bridge_to_switch_ports": false
            }

## Network Update [/api/v1/locations/{location_id}/networks/{id}{?location_network}]

### Update a Network [PATCH]

**CAUSES SYNC**

Please note, updating a network will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the network you wish to update.
    + location_network (required, object) ... A full list of parameters you wish to update.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
            "location_network: {
                "ssid_hidden": true,
                "config_type_bridge": false,
                "radio_channel_0": "auto"
            }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "location_id": 1636,
            "url": "google.com",
            "created_at": "2014-09-17T00:15:57.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }



# Group Payloads

Payloads reference the **Payloads API**. 

Payloads can be applied directly to a box (see Box API) or events. There's two types of events:

1. Available to schedule
2. PolkaSpots only

PolkaSpots only payloads should not be run on non-ps boxes. For example, you cannot schedule a Xirrus to reboot using the paylods. However, you may disable the Xirrus login screens. PolkaSpots only payloads are suitable for boxes running the Stinky Panda firmware only.

##Allowed HTTPs requests:

- `GET` - Retrieves a resource or list of resources

##Allowed HTTPs requests for non-customers:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `DELETE` - Delete a resource

## Payloads Collection [/api/v1/payloads]

### List all Payloads [GET]

+ Response 200 (application/json)

    + Body
                
            [
                {
                    "id": 34,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Reboot my access point ",
                    "payload_name": "Reboot Access Points",
                    "payload_command": "/sbin/reboot",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 35,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Disable My Login Screens",
                    "payload_name": "Disable Login Screens",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": false
                },
                {
                    "id": 36,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Enable My Login Screens",
                    "payload_name": "Enable Login Screens",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": false
                },
                {
                    "id": 37,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Disable my private Wi-Fi network completely",
                    "payload_name": "Disable Private Wi-Fi Network",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 38,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Enable my private Wi-Fi network",
                    "payload_name": "Enable Private Wi-Fi Network",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 39,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Hide my public Wi-Fi network",
                    "payload_name": "Hide Public Wi-Fi Network",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 40,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Show my public Wi-Fi network",
                    "payload_name": "Show Public Wi-Fi Network",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 41,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Disable all Wi-Fi networks",
                    "payload_name": "Wi-Fi Down Completely",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                },
                {
                    "id": 42,
                    "unique_id": "9328ce1-c7c4-49a2-bee1-c2a2d6234a9d",
                    "payload_description": "Enable all Wi-Fi networks",
                    "payload_name": "Wi-Fi Up Completely",
                    "payload_command": "",
                    "can_schedule": true,
                    "only_polkaspots": true
                }
            ]
            
## Payloads Create [/api/v1/payloads{?payload}]

### Create a payload [POST]

+ Request 200 (application/json)

            {
                "payload": 
                    {
                        "payload_description": "Reboot my access point ",
                        "payload_name": "Reboot Access Points",
                        "payload_command": "/sbin/reboot",
                        "can_schedule": true,
                        "only_polkaspots": true
                    }
            }


+ Response 200 (application/json)

    + Body
        
            {
                "id": 34,
                "payload_description": "Reboot my access point ",
                "payload_name": "Reboot Access Points",
                "payload_command": "/sbin/reboot",
                "can_schedule": true,
                "only_polkaspots": true
            }
        

## Payload Details [/api/v1/payloads/:id]

### Update a Payload [GET]


+ Parameters

    + id (required, integer, `1`) ... ID of the payload you wish to update.

+ Request (application/json)

        {"id": 34}

+ Response 200 (application/json)

    + Body
        
            {
                "id": 34,
                "payload_description": "Reboot my access point ",
                "payload_name": "Reboot Access Points",
                "payload_command": "/sbin/reboot",
                "can_schedule": false,
                "only_polkaspots": true
            }
        
## Payload Update [/api/v1/payloads/:id{?payload}]

### Update a Payload [PATCH]

+ Parameters

    + id (required, integer, `1`) ... ID of the payload you wish to update.
    + payload (required, params, `{some: params, included: here}`) ... An object with the parameters you want to update.

+ Request (application/json)

        {
            "payload": {
                "payload_description": "Reboot my access point ",
                "payload_name": "Reboot Access Points",
                "payload_command": "/sbin/reboot",
                "can_schedule": false,
                "only_polkaspots": true
            }
        }

+ Response 200 (application/json)

    + Body
        
            {
                "id": 34,
                "payload_description": "Reboot my access point ",
                "payload_name": "Reboot Access Points",
                "payload_command": "/sbin/reboot",
                "can_schedule": false,
                "only_polkaspots": true
            }
        

## Payload Delete [/api/v1/payloads/{id}]

### Delete a Payload [DELETE]

+ Parameters

    + id (required, integer, `1`) ... ID of the payload you wish to update.

+ Request (application/json)

        {   
            "id": 123,
        }

+ Response 204 (application/json)


# Group Walled Gardens

Walled Gardens related resources of the **Walled Gardens API**. Walled gardens are a nested in a location. You cannot currently list all your walled gardens without specifying a location id (slug).

Adding a walled garden to a location will allow unlimited access to the url specified. Users will not have to login to browse these sites.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PATCH` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Walled Gardens Collection [/api/v1/locations/{location_id}/walledgardens]

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.

### List all Walled Gardens [GET]

+ Request (application/json)

            { "location_id": "derby-council" }

+ Response 200 (application/json)


    + Body
    
            [{
                
                {
                    "id": 75,
                    "location_id": 870,
                    "url": "polkaspots.com",
                    "created_at": "2014-09-16T23:50:42.000+01:00",
                    "updated_at": "2014-09-16T23:50:42.000+01:00"
                },
                {
                    "id": 76,
                    "location_id": 870,
                    "url": "google.com",
                    "created_at": "2014-09-16T23:50:47.000+01:00",
                    "updated_at": "2014-09-16T23:50:47.000+01:00"
                },
                {
                    "id": 77,
                    "location_id": 870,
                    "url": "peaceandharmony.com",
                    "created_at": "2014-09-16T23:51:03.000+01:00",
                    "updated_at": "2014-09-16T23:51:03.000+01:00"
                }
                
            }]

## Walled Garden Create [/api/v1/locations/{location_id}/walledgardens{?url}]

### Create a Walled Garden [POST]

There's two ways to create a walled garden. You can either post directly with a location id or you update the resource when updating a location. Please see the section within the location's group for more information. 

**CAUSES SYNC**

Please note, creating a new walled garden will force all your boxes to reload their networks. This *will* log users off.

*TODO: Implement the batch create process.*

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + url (required, string, `polkaspots.com`) ... URL `url` of the Location to whitelist. Please don't include the protocol (http or https).

+ Request (application/json)

        { "url": "polkaspots.com" }

+ Response 200 (application/json)

        {
            "id": 7,
            "location_id": 1636,
            "url": "polkaspots.com",
            "created_at": "2014-09-17T00:15:57.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }


## Walled Garden Update [/api/v1/locations/{location_id}/walledgardens/{id}?walledgarden={?url}]

### Update a Walled Garden [PATCH]

You can also update a walled garden url by using the location's update method.

**CAUSES SYNC**

Please note, creating a new walled garden will force all your boxes to reload their networks. This *will* log users off.


+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the walled garden you wish to update.
    + url (required, string, `polkaspots.com`) ... URL `url` of the Location to whitelist. Please don't include the protocol (http or https).

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
            "walledgarden: {
                "url": "google.com"
            }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "location_id": 1636,
            "url": "google.com",
            "created_at": "2014-09-17T00:15:57.239+01:00",
            "updated_at": "2014-09-17T00:15:57.239+01:00"
        }

## Walled Garden Delete [/api/v1/locations/{location_id}/walledgardens/{id}]

### Delete a Walled Garden [DELETE]

**CAUSES SYNC**

Please note, creating a new walled garden will force all your boxes to reload their networks. This *will* log users off.

+ Parameters

    + location_id (required, string, `derby-city-council`) ... Slug `slug` of the Location to perform action with. Has example value.
    + id (required, integer, `1`) ... ID of the walled garden you wish to update.

+ Request (application/json)

        {   
            "location_id": "derby-council",
            "id": 123,
        }

+ Response 204 (application/json)
